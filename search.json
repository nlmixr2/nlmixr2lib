[{"path":"https://nlmixr2.github.io/nlmixr2lib/articles/create-model-library.html","id":"model-library-conventions-within-nlmixr2lib","dir":"Articles","previous_headings":"","what":"Model library conventions within nlmixr2lib","title":"Creating a model library","text":"Compartment parameter names lower case use snakeCase combined way. Compartment parameter names selected align used rxode2::linCmt() described vignette: vignette(“rxode2-model-types”, package = “rxode2”).","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/articles/create-model-library.html","id":"compartment-naming","dir":"Articles","previous_headings":"Model library conventions within nlmixr2lib","what":"Compartment naming","title":"Creating a model library","text":"Compartment naming follows compartment names linCmt() augmentation compartments: depot: extravascular dosing compartment (example, gut oral dosing subcutaneous space subcutaneous dosing) central: intravascular compartment used intravenous dosing typical pharmacokinetic (PK) model sampling drug peripheral1, peripheral2: first second peripheral compartments 2- 3-compartment PK models effect: compartment effect compartment models Therapeutic-area-specific models use consistent compartment parameter naming. adding new therapeutic area model library, please discuss naming first new GitHub issue.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/articles/create-model-library.html","id":"estimated-parameter-naming","dir":"Articles","previous_headings":"Model library conventions within nlmixr2lib","what":"Estimated parameter naming","title":"Creating a model library","text":"enable consistent cross-model compatibility, following conventions used unless strong reason exception: Pharmacokinetic concentrations central compartment named Cc. Cc used even using linCmt() model (case Cc <- linCmt() used residual error applied Cc parameter). Therapeutic-area-specific models use consistent compartment parameter naming. adding new therapeutic area model library, please discuss naming first new GitHub issue.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/articles/create-model-library.html","id":"parameter-naming","dir":"Articles","previous_headings":"Model library conventions within nlmixr2lib","what":"Parameter naming","title":"Creating a model library","text":"PK models use following parameter naming conventions: ka: absorption rate cl: clearance q: intercompartmental clearance (central peripheral1 compartments) q2: second intercompartmental clearance (central peripheral2 compartments) vc: central volume distribution vp, vp2: first second peripheral compartment volumes micro-constants used, use following naming conventions: kel elimination rate (cl/vc) k12, k21, k13, k31: intercompartmental transit rates (q/vc, q/vp, q2/vc, q2/vp2, respectively)","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/articles/create-model-library.html","id":"parameter-transforms","dir":"Articles","previous_headings":"Model library conventions within nlmixr2lib","what":"Parameter transforms","title":"Creating a model library","text":"Parameters often estimated transformed scale. instance, natural logarithm transform often used parameters must positive, logit transform often used parameter must remain within specific range. Transformed parameters prefixed indicator transformation. Preferred transformation prefixes : l (lower case L): natural log transform logit: logit transform probit: probit transform transform similarly include full transform prefix Generally, transform natural logarithm, include full name prefix. example, natural logarithm-transformed ka lka logit-transformed emax logitemax.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/articles/create-model-library.html","id":"random-effects","dir":"Articles","previous_headings":"Model library conventions within nlmixr2lib","what":"Random effects","title":"Creating a model library","text":"Random effects estimates part distribution varying grouping factor. grouping factor often subject clinical trial. (NONMEM users, random effects often referred inter-individual variability.) Random effect parameters prefix (transformed) parameter name eta. example, random effect log-transformed clearance named etalcl.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/articles/create-model-library.html","id":"drug-effects","dir":"Articles","previous_headings":"Model library conventions within nlmixr2lib","what":"Drug effects","title":"Creating a model library","text":"Different drug effects may investigated model building. , multiple drug effect styles (linear, Emax, threshold, etc.) may investigated user. enable simpler changes drug effects minimize chance parameter name collisions combining models, following rules strongly recommended: Drug effects calculated model enable changing type drug effect (e.g. linear Emax). parameter name drug effect called drugEffect followed name part model closely associated drug effect. example, Simeoni 2004 model, drug effect called drugEffectCyclingCells.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/articles/create-model-library.html","id":"model-files","dir":"Articles","previous_headings":"","what":"Model files","title":"Creating a model library","text":"Files model library following characteristics: first line inside function description assignment. description <- \"description model\" right inside function() ini({}) block. model literature reference associated , second line inside function reference, example, reference <- \"Richard Hooijmaijers, Matthew Fidler, William S. Denney (2022).  nlmixr2lib: Model Library 'nlmixr2'.  https://nlmixr2.github.io/nlmixr2lib/\" helpful give user information model load, can added meta-data \"message\" attribute model. Note case, must give function name last line model ensure returned value evaluation file. (See oncology_xenograft_simeoni_2004.R example adding message.) model combined models expects certain objects defined depends value specified. example tumor growth model driven drug concentration central compartment, following used: depends <\"Cc\" can also helpful specify compartments dosing expected. can done following manner: dosing <- c(\"central\", \"depot\") Units used model can specified using list units  <- list(dosing= \"mg/kg\", time=\"hr\") add fields list please discuss first GitHub issue. remainder file nlmixr2 model function typical ini() model() block. name file match name model within file. function modify, self-start, otherwise help user make sense, add new file R/ directory file name function name updateModelName() using word update followed model name camelCase (e.g. updateOncologyXenograftSimeoni2004). function added, please add messages described , well. Update functions must able take function, rxUi object, nlmixr2fitCore object usually return rxUi object. examples, see package installation directory.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Richard Hooijmaijers. Author. Matthew Fidler. Author. Bill Denney. Author, maintainer.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hooijmaijers R, Fidler M, Denney B (2025). nlmixr2lib: Model Library 'nlmixr2'. R package version 0.3.0, https://github.com/nlmixr2/nlmixr2lib.","code":"@Manual{,   title = {nlmixr2lib: A Model Library for 'nlmixr2'},   author = {Richard Hooijmaijers and Matthew Fidler and Bill Denney},   year = {2025},   note = {R package version 0.3.0},   url = {https://github.com/nlmixr2/nlmixr2lib}, }"},{"path":"https://nlmixr2.github.io/nlmixr2lib/index.html","id":"nlmixr2lib","dir":"","previous_headings":"","what":"A Model Library for nlmixr2","title":"A Model Library for nlmixr2","text":"model library nlmixr2. package allows ways interact model library:","code":"# See all available models modellib() # Load the \"PK_1cmt\" model modellib(name=\"PK_1cmt\") # Switch residual error to additive modellib(name=\"PK_1cmt\", reserr = \"addSd\") # Add inter-individual variability on ka and v and switch residual error to # additive and proportional modellib(name=\"PK_1cmt\", eta = c(\"lka\", \"lv\"), reserr = c(\"addSd\", \"propSd\"))"},{"path":"https://nlmixr2.github.io/nlmixr2lib/index.html","id":"modifying-models-by-piping","dir":"","previous_headings":"","what":"Modifying models by piping","title":"A Model Library for nlmixr2","text":"may also modify model library (models) piping interface. code adds inter-individual variability ka v switches residual error additive proportional.","code":"modellib(name=\"PK_1cmt\") %>%   addEta(c(\"lka\", \"lv\") %>%   addResErr(c(\"addSd\", \"propSd\"))"},{"path":"https://nlmixr2.github.io/nlmixr2lib/index.html","id":"possible-extensions","dir":"","previous_headings":"","what":"Possible extensions","title":"A Model Library for nlmixr2","text":"modellib function set-way can easily extended used applications. possible extension implementation shiny app. app can created easily add new models model library database (curated?), directly make models available users. believe can added value base model library can easily extended community way.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addBaseline1exp.html","id":null,"dir":"Reference","previous_headings":"","what":"Add baseline that decays exponential with time — addBaseline1exp","title":"Add baseline that decays exponential with time — addBaseline1exp","text":"Add baseline decays exponential time","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addBaseline1exp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add baseline that decays exponential with time — addBaseline1exp","text":"","code":"addBaseline1exp(ui, effect = \"effect\", eb = \"Eb\", time = \"time\", kb = \"kb\")"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addBaseline1exp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add baseline that decays exponential with time — addBaseline1exp","text":"ui rxode2 model effect effect variable modeled eb baseline constant parameter time time variable used baseline decay kb first order baseline decay constant","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addBaseline1exp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add baseline that decays exponential with time — addBaseline1exp","text":"model baseline constant","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addBaseline1exp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add baseline that decays exponential with time — addBaseline1exp","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addBaseline1exp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add baseline that decays exponential with time — addBaseline1exp","text":"","code":"readModelDb(\"PK_2cmt_no_depot\") |>   addDirectLin() |>   convertQuad() |>   addBaseline1exp() #>   #>   #>  ── rxode2-based free-form 2-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>      lcl      lvc      lvp       lq   propSd      uEk effectSd     uEk2  #>      1.0      3.0      5.0      0.1      0.5      0.1      0.1      0.1  #>      uEb      lkb  #>      0.1      0.1  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1          central #> 2                  2      peripheral1 #>  ── Multiple Endpoint Model ($multipleEndpoint): ──   #>     variable                   cmt                   dvid* #> 1     Cc ~ …     cmt='Cc' or cmt=3     dvid='Cc' or dvid=1 #> 2 effect ~ … cmt='effect' or cmt=4 dvid='effect' or dvid=2 #>   * If dvids are outside this range, all dvids are re-numered sequentially, ie 1,7, 10 becomes 1,2,3 etc #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         uEk <- 0.1 #>         label(\"untransformed slope (Ek)\") #>         effectSd <- c(0, 0.1) #>         label(\"additive error for effect\") #>         uEk2 <- 0.1 #>         label(\"untransformed quadratic slope (Ek2)\") #>         uEb <- 0.1 #>         label(\"untransformed constant baseline (Eb)\") #>         lkb <- 0.1 #>         label(\"baseline time-decay constant (kb)\") #>     }) #>     model({ #>         Eb <- uEb #>         kb <- exp(lkb) #>         Ek2 <- uEk2 #>         Ek <- uEk #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         q <- exp(lq) #>         kel <- cl/vc #>         k12 <- q/vc #>         k21 <- q/vp #>         d/dt(central) <- kel * central - k12 * central + k21 *  #>             peripheral1 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>         effect <- Ek * Cc + Ek2 * Cc^2 + Eb * (1 - exp(-kb *  #>             time)) #>         effect ~ add(effectSd) #>     }) #> }"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addBaselineConst.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an estimated baseline constant — addBaselineConst","title":"Add an estimated baseline constant — addBaselineConst","text":"Add estimated baseline constant","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addBaselineConst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an estimated baseline constant — addBaselineConst","text":"","code":"addBaselineConst(ui, effect = \"effect\", eb = \"Eb\")"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addBaselineConst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an estimated baseline constant — addBaselineConst","text":"ui rxode2 model effect effect variable modeled eb baseline constant parameter","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addBaselineConst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an estimated baseline constant — addBaselineConst","text":"model baseline constant","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addBaselineConst.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add an estimated baseline constant — addBaselineConst","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addBaselineConst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an estimated baseline constant — addBaselineConst","text":"","code":"readModelDb(\"PK_2cmt_no_depot\") |>   addDirectLin() |>   convertQuad() |>   addBaselineConst() #>   #>   #>  ── rxode2-based free-form 2-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>      lcl      lvc      lvp       lq   propSd      uEk effectSd     uEk2  #>      1.0      3.0      5.0      0.1      0.5      0.1      0.1      0.1  #>      uEb  #>      0.1  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1          central #> 2                  2      peripheral1 #>  ── Multiple Endpoint Model ($multipleEndpoint): ──   #>     variable                   cmt                   dvid* #> 1     Cc ~ …     cmt='Cc' or cmt=3     dvid='Cc' or dvid=1 #> 2 effect ~ … cmt='effect' or cmt=4 dvid='effect' or dvid=2 #>   * If dvids are outside this range, all dvids are re-numered sequentially, ie 1,7, 10 becomes 1,2,3 etc #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         uEk <- 0.1 #>         label(\"untransformed slope (Ek)\") #>         effectSd <- c(0, 0.1) #>         label(\"additive error for effect\") #>         uEk2 <- 0.1 #>         label(\"untransformed quadratic slope (Ek2)\") #>         uEb <- 0.1 #>         label(\"untransformed constant baseline (Eb)\") #>     }) #>     model({ #>         Eb <- uEb #>         Ek2 <- uEk2 #>         Ek <- uEk #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         q <- exp(lq) #>         kel <- cl/vc #>         k12 <- q/vc #>         k21 <- q/vp #>         d/dt(central) <- kel * central - k12 * central + k21 *  #>             peripheral1 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>         effect <- Ek * Cc + Ek2 * Cc^2 + Eb #>         effect ~ add(effectSd) #>     }) #> }"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addBaselineExp.html","id":null,"dir":"Reference","previous_headings":"","what":"Add baseline that decays exponential with time — addBaselineExp","title":"Add baseline that decays exponential with time — addBaselineExp","text":"Add baseline decays exponential time","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addBaselineExp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add baseline that decays exponential with time — addBaselineExp","text":"","code":"addBaselineExp(ui, effect = \"effect\", eb = \"Eb\", time = \"time\", kb = \"kb\")"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addBaselineExp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add baseline that decays exponential with time — addBaselineExp","text":"ui rxode2 model effect effect variable modeled eb baseline constant parameter time time variable used baseline decay kb first order baseline decay constant","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addBaselineExp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add baseline that decays exponential with time — addBaselineExp","text":"model baseline constant","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addBaselineExp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add baseline that decays exponential with time — addBaselineExp","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addBaselineExp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add baseline that decays exponential with time — addBaselineExp","text":"","code":"readModelDb(\"PK_2cmt_no_depot\") |>   addDirectLin() |>   convertQuad() |>   addBaselineExp() #>   #>   #>  ── rxode2-based free-form 2-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>      lcl      lvc      lvp       lq   propSd      uEk effectSd     uEk2  #>      1.0      3.0      5.0      0.1      0.5      0.1      0.1      0.1  #>      uEb      lkb  #>      0.1      0.1  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1          central #> 2                  2      peripheral1 #>  ── Multiple Endpoint Model ($multipleEndpoint): ──   #>     variable                   cmt                   dvid* #> 1     Cc ~ …     cmt='Cc' or cmt=3     dvid='Cc' or dvid=1 #> 2 effect ~ … cmt='effect' or cmt=4 dvid='effect' or dvid=2 #>   * If dvids are outside this range, all dvids are re-numered sequentially, ie 1,7, 10 becomes 1,2,3 etc #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         uEk <- 0.1 #>         label(\"untransformed slope (Ek)\") #>         effectSd <- c(0, 0.1) #>         label(\"additive error for effect\") #>         uEk2 <- 0.1 #>         label(\"untransformed quadratic slope (Ek2)\") #>         uEb <- 0.1 #>         label(\"untransformed constant baseline (Eb)\") #>         lkb <- 0.1 #>         label(\"baseline time-decay constant (kb)\") #>     }) #>     model({ #>         Eb <- uEb #>         kb <- exp(lkb) #>         Ek2 <- uEk2 #>         Ek <- uEk #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         q <- exp(lq) #>         kel <- cl/vc #>         k12 <- q/vc #>         k21 <- q/vp #>         d/dt(central) <- kel * central - k12 * central + k21 *  #>             peripheral1 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>         effect <- Ek * Cc + Ek2 * Cc^2 + Eb * exp(-kb * time) #>         effect ~ add(effectSd) #>     }) #> }"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addBaselineLin.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an estimated baseline linear constant — addBaselineLin","title":"Add an estimated baseline linear constant — addBaselineLin","text":"Add estimated baseline linear constant","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addBaselineLin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an estimated baseline linear constant — addBaselineLin","text":"","code":"addBaselineLin(ui, effect = \"effect\", eb = \"Eb\", time = \"time\")"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addBaselineLin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an estimated baseline linear constant — addBaselineLin","text":"ui rxode2 model effect effect variable modeled eb baseline constant parameter time time variable used baseline decay","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addBaselineLin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an estimated baseline linear constant — addBaselineLin","text":"model baseline linear constant","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addBaselineLin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add an estimated baseline linear constant — addBaselineLin","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addBaselineLin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an estimated baseline linear constant — addBaselineLin","text":"","code":"readModelDb(\"PK_2cmt_no_depot\") |>   addDirectLin() |>   convertQuad() |>   addBaselineLin() #>   #>   #>  ── rxode2-based free-form 2-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>      lcl      lvc      lvp       lq   propSd      uEk effectSd     uEk2  #>      1.0      3.0      5.0      0.1      0.5      0.1      0.1      0.1  #>      uEb  #>      0.1  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1          central #> 2                  2      peripheral1 #>  ── Multiple Endpoint Model ($multipleEndpoint): ──   #>     variable                   cmt                   dvid* #> 1     Cc ~ …     cmt='Cc' or cmt=3     dvid='Cc' or dvid=1 #> 2 effect ~ … cmt='effect' or cmt=4 dvid='effect' or dvid=2 #>   * If dvids are outside this range, all dvids are re-numered sequentially, ie 1,7, 10 becomes 1,2,3 etc #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         uEk <- 0.1 #>         label(\"untransformed slope (Ek)\") #>         effectSd <- c(0, 0.1) #>         label(\"additive error for effect\") #>         uEk2 <- 0.1 #>         label(\"untransformed quadratic slope (Ek2)\") #>         uEb <- 0.1 #>         label(\"untransformed constant baseline (Eb)\") #>     }) #>     model({ #>         Eb <- uEb #>         Ek2 <- uEk2 #>         Ek <- uEk #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         q <- exp(lq) #>         kel <- cl/vc #>         k12 <- q/vc #>         k21 <- q/vp #>         d/dt(central) <- kel * central - k12 * central + k21 *  #>             peripheral1 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>         effect <- Ek * Cc + Ek2 * Cc^2 + Eb * time #>         effect ~ add(effectSd) #>     }) #> }"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addCmtProp.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a property to a compartment — addCmtProp","title":"Add a property to a compartment — addCmtProp","text":"Add property compartment","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addCmtProp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a property to a compartment — addCmtProp","text":"","code":"addCmtProp(ui, prop = c(\"f\", \"lag\", \"dur\", \"rate\", \"ini\"), cmt)  addBioavailability(ui, cmt)  addLag(ui, cmt)  addDur(ui, cmt)  addRate(ui, cmt)  addIni(ui, cmt)"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addCmtProp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a property to a compartment — addCmtProp","text":"ui rxode2 ui object prop property add compartment: - F: bioavailability - lag: absorption lag time - dur: modeled duration infusion - rate: modeled infusion rate - ini: initial value compartment cmt compartment apply property ","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addCmtProp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a property to a compartment — addCmtProp","text":"rxode2 ui object property applied","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addCmtProp.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Add a property to a compartment — addCmtProp","text":"addBioavailability(): Adds bioavailability compartment model addLag(): Adds lag-time compartment model addDur(): Adds modeled duration compartment model addRate(): Adds modeled rate compartment model addIni(): Adds initial value compartment","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addCmtProp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add a property to a compartment — addCmtProp","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addCmtProp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a property to a compartment — addCmtProp","text":"","code":"readModelDb(\"PK_3cmt_des\") |> addCmtProp(\"f\", \"depot\") #>   #>   #>  ── rxode2-based free-form 4-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>     lka     lcl     lvc     lvp    lvp2      lq     lq2  propSd lfDepot  #>    0.45    1.00    3.00    5.00    8.00    0.10    0.50    0.50    0.10  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1            depot #> 2                  2          central #> 3                  3      peripheral1 #> 4                  4      peripheral2 #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lvp2 <- 8 #>         label(\"Second peripheral volume of distribution (Vp2)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         lq2 <- 0.5 #>         label(\"Second intercompartmental clearance (Q2)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lfDepot <- 0.1 #>     }) #>     model({ #>         fDepot <- exp(lfDepot) #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         vp2 <- exp(lvp2) #>         q <- exp(lq) #>         q2 <- exp(lq2) #>         kel <- cl/vc #>         k12 <- q/vc #>         k21 <- q/vp #>         k13 <- q2/vc #>         k31 <- q2/vp2 #>         d/dt(depot) <- -ka * depot #>         f(depot) <- fDepot #>         d/dt(central) <- ka * depot - kel * central - k12 * central +  #>             k21 * peripheral1 - k13 * central + k31 * peripheral2 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         d/dt(peripheral2) <- k13 * central - k31 * peripheral2 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>     }) #> }  readModelDb(\"PK_3cmt_des\") |> addBioavailability(depot) #>   #>   #>  ── rxode2-based free-form 4-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>     lka     lcl     lvc     lvp    lvp2      lq     lq2  propSd lfDepot  #>    0.45    1.00    3.00    5.00    8.00    0.10    0.50    0.50    0.10  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1            depot #> 2                  2          central #> 3                  3      peripheral1 #> 4                  4      peripheral2 #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lvp2 <- 8 #>         label(\"Second peripheral volume of distribution (Vp2)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         lq2 <- 0.5 #>         label(\"Second intercompartmental clearance (Q2)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lfDepot <- 0.1 #>     }) #>     model({ #>         fDepot <- exp(lfDepot) #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         vp2 <- exp(lvp2) #>         q <- exp(lq) #>         q2 <- exp(lq2) #>         kel <- cl/vc #>         k12 <- q/vc #>         k21 <- q/vp #>         k13 <- q2/vc #>         k31 <- q2/vp2 #>         d/dt(depot) <- -ka * depot #>         f(depot) <- fDepot #>         d/dt(central) <- ka * depot - kel * central - k12 * central +  #>             k21 * peripheral1 - k13 * central + k31 * peripheral2 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         d/dt(peripheral2) <- k13 * central - k31 * peripheral2 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>     }) #> }  readModelDb(\"PK_3cmt_des\") |> addLag(depot) #>   #>   #>  ── rxode2-based free-form 4-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>       lka       lcl       lvc       lvp      lvp2        lq       lq2    propSd  #>      0.45      1.00      3.00      5.00      8.00      0.10      0.50      0.50  #> llagDepot  #>      0.10  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1            depot #> 2                  2          central #> 3                  3      peripheral1 #> 4                  4      peripheral2 #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lvp2 <- 8 #>         label(\"Second peripheral volume of distribution (Vp2)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         lq2 <- 0.5 #>         label(\"Second intercompartmental clearance (Q2)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         llagDepot <- 0.1 #>     }) #>     model({ #>         lagDepot <- exp(llagDepot) #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         vp2 <- exp(lvp2) #>         q <- exp(lq) #>         q2 <- exp(lq2) #>         kel <- cl/vc #>         k12 <- q/vc #>         k21 <- q/vp #>         k13 <- q2/vc #>         k31 <- q2/vp2 #>         d/dt(depot) <- -ka * depot #>         lag(depot) <- lagDepot #>         d/dt(central) <- ka * depot - kel * central - k12 * central +  #>             k21 * peripheral1 - k13 * central + k31 * peripheral2 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         d/dt(peripheral2) <- k13 * central - k31 * peripheral2 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>     }) #> }  readModelDb(\"PK_3cmt_des\") |> addDur(depot) #>   #>   #>  ── rxode2-based free-form 4-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>       lka       lcl       lvc       lvp      lvp2        lq       lq2    propSd  #>      0.45      1.00      3.00      5.00      8.00      0.10      0.50      0.50  #> ldurDepot  #>      0.10  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1            depot #> 2                  2          central #> 3                  3      peripheral1 #> 4                  4      peripheral2 #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lvp2 <- 8 #>         label(\"Second peripheral volume of distribution (Vp2)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         lq2 <- 0.5 #>         label(\"Second intercompartmental clearance (Q2)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         ldurDepot <- 0.1 #>     }) #>     model({ #>         durDepot <- exp(ldurDepot) #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         vp2 <- exp(lvp2) #>         q <- exp(lq) #>         q2 <- exp(lq2) #>         kel <- cl/vc #>         k12 <- q/vc #>         k21 <- q/vp #>         k13 <- q2/vc #>         k31 <- q2/vp2 #>         d/dt(depot) <- -ka * depot #>         dur(depot) <- durDepot #>         d/dt(central) <- ka * depot - kel * central - k12 * central +  #>             k21 * peripheral1 - k13 * central + k31 * peripheral2 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         d/dt(peripheral2) <- k13 * central - k31 * peripheral2 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>     }) #> }  readModelDb(\"PK_3cmt_des\") |> addRate(depot) #>   #>   #>  ── rxode2-based free-form 4-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>        lka        lcl        lvc        lvp       lvp2         lq        lq2  #>       0.45       1.00       3.00       5.00       8.00       0.10       0.50  #>     propSd lrateDepot  #>       0.50       0.10  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1            depot #> 2                  2          central #> 3                  3      peripheral1 #> 4                  4      peripheral2 #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lvp2 <- 8 #>         label(\"Second peripheral volume of distribution (Vp2)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         lq2 <- 0.5 #>         label(\"Second intercompartmental clearance (Q2)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lrateDepot <- 0.1 #>     }) #>     model({ #>         rateDepot <- exp(lrateDepot) #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         vp2 <- exp(lvp2) #>         q <- exp(lq) #>         q2 <- exp(lq2) #>         kel <- cl/vc #>         k12 <- q/vc #>         k21 <- q/vp #>         k13 <- q2/vc #>         k31 <- q2/vp2 #>         d/dt(depot) <- -ka * depot #>         rate(depot) <- rateDepot #>         d/dt(central) <- ka * depot - kel * central - k12 * central +  #>             k21 * peripheral1 - k13 * central + k31 * peripheral2 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         d/dt(peripheral2) <- k13 * central - k31 * peripheral2 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>     }) #> }  readModelDb(\"PK_3cmt_des\") |> addIni(depot) #>   #>   #>  ── rxode2-based free-form 4-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>       lka       lcl       lvc       lvp      lvp2        lq       lq2    propSd  #>      0.45      1.00      3.00      5.00      8.00      0.10      0.50      0.50  #> liniDepot  #>      0.10  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1            depot #> 2                  2          central #> 3                  3      peripheral1 #> 4                  4      peripheral2 #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lvp2 <- 8 #>         label(\"Second peripheral volume of distribution (Vp2)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         lq2 <- 0.5 #>         label(\"Second intercompartmental clearance (Q2)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         liniDepot <- 0.1 #>     }) #>     model({ #>         iniDepot <- exp(liniDepot) #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         vp2 <- exp(lvp2) #>         q <- exp(lq) #>         q2 <- exp(lq2) #>         kel <- cl/vc #>         k12 <- q/vc #>         k21 <- q/vp #>         k13 <- q2/vc #>         k31 <- q2/vp2 #>         d/dt(depot) <- -ka * depot #>         depot(0) <- iniDepot #>         d/dt(central) <- ka * depot - kel * central - k12 * central +  #>             k21 * peripheral1 - k13 * central + k31 * peripheral2 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         d/dt(peripheral2) <- k13 * central - k31 * peripheral2 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>     }) #> }"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addDepot.html","id":null,"dir":"Reference","previous_headings":"","what":"To convert from infusion/intravenous administration to first-order oral absorption — addDepot","title":"To convert from infusion/intravenous administration to first-order oral absorption — addDepot","text":"convert infusion/intravenous administration first-order oral absorption","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addDepot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"To convert from infusion/intravenous administration to first-order oral absorption — addDepot","text":"","code":"addDepot(ui, central = \"central\", depot = \"depot\", ka = \"ka\")"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addDepot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"To convert from infusion/intravenous administration to first-order oral absorption — addDepot","text":"ui model function (something convertible rxUi object) central central compartment name depot depot compartment name ka absorption rate parameter name","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addDepot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"To convert from infusion/intravenous administration to first-order oral absorption — addDepot","text":"model depot added","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addDepot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"To convert from infusion/intravenous administration to first-order oral absorption — addDepot","text":"","code":"# most of the examples in the model library already have a depot # the PK_2cmt_no_depot is an exception readModelDb(\"PK_2cmt_no_depot\")  |> addDepot() #>   #>   #>  ── rxode2-based free-form 3-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>    lcl    lvc    lvp     lq propSd    lka  #>    1.0    3.0    5.0    0.1    0.5    0.1  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1            depot #> 2                  2          central #> 3                  3      peripheral1 #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lka <- 0.1 #>         label(\"First order absorption rate (ka)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         q <- exp(lq) #>         kel <- cl/vc #>         k12 <- q/vc #>         k21 <- q/vp #>         d/dt(depot) <- -ka * depot #>         d/dt(central) <- -kel * central - k12 * central + k21 *  #>             peripheral1 + ka * depot #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>     }) #> }"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addDirToModelDb.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a directory to the modeldb — addDirToModelDb","title":"Add a directory to the modeldb — addDirToModelDb","text":"Add directory modeldb","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addDirToModelDb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a directory to the modeldb — addDirToModelDb","text":"","code":"addDirToModelDb(dir, modeldb = data.frame())  addFileToModelDb(dir, file, modeldb)"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addDirToModelDb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a directory to the modeldb — addDirToModelDb","text":"dir Directory name containing model files modeldb starting modeldb data.frame file file name (without directory name)","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addDirToModelDb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a directory to the modeldb — addDirToModelDb","text":"updated modeldb data.frame model database","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addDirToModelDb.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Add a directory to the modeldb — addDirToModelDb","text":"addFileToModelDb(): Add file modeldb","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addDirectLin.html","id":null,"dir":"Reference","previous_headings":"","what":"Add direct linear effect with baseline=0 — addDirectLin","title":"Add direct linear effect with baseline=0 — addDirectLin","text":"Add direct linear effect baseline=0","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addDirectLin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add direct linear effect with baseline=0 — addDirectLin","text":"","code":"addDirectLin(ui, ek = \"Ek\", cc = c(\"Ce\", \"Cc\"), effect = \"effect\")"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addDirectLin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add direct linear effect with baseline=0 — addDirectLin","text":"ui rxode2 model ek simulation linear constant cc concentration value effect effect variable modeled","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addDirectLin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add direct linear effect with baseline=0 — addDirectLin","text":"model direct linear effect added (baseline=0)","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addDirectLin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add direct linear effect with baseline=0 — addDirectLin","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addDirectLin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add direct linear effect with baseline=0 — addDirectLin","text":"","code":"# Direct linear model readModelDb(\"PK_2cmt_no_depot\") |>   addDirectLin() #>   #>   #>  ── rxode2-based free-form 2-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>      lcl      lvc      lvp       lq   propSd      uEk effectSd  #>      1.0      3.0      5.0      0.1      0.5      0.1      0.1  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1          central #> 2                  2      peripheral1 #>  ── Multiple Endpoint Model ($multipleEndpoint): ──   #>     variable                   cmt                   dvid* #> 1     Cc ~ …     cmt='Cc' or cmt=3     dvid='Cc' or dvid=1 #> 2 effect ~ … cmt='effect' or cmt=4 dvid='effect' or dvid=2 #>   * If dvids are outside this range, all dvids are re-numered sequentially, ie 1,7, 10 becomes 1,2,3 etc #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         uEk <- 0.1 #>         label(\"untransformed slope (Ek)\") #>         effectSd <- c(0, 0.1) #>         label(\"additive error for effect\") #>     }) #>     model({ #>         Ek <- uEk #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         q <- exp(lq) #>         kel <- cl/vc #>         k12 <- q/vc #>         k21 <- q/vp #>         d/dt(central) <- -kel * central - k12 * central + k21 *  #>             peripheral1 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>         effect <- Ek * Cc #>         effect ~ add(effectSd) #>     }) #> }  # Direct emax model readModelDb(\"PK_2cmt_no_depot\") |>   addDirectLin() |>   convertEmax() #>   #>   #>  ── rxode2-based free-form 2-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>      lcl      lvc      lvp       lq   propSd effectSd    lEmax    lEC50  #>      1.0      3.0      5.0      0.1      0.5      0.1      0.1      0.1  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1          central #> 2                  2      peripheral1 #>  ── Multiple Endpoint Model ($multipleEndpoint): ──   #>     variable                   cmt                   dvid* #> 1     Cc ~ …     cmt='Cc' or cmt=3     dvid='Cc' or dvid=1 #> 2 effect ~ … cmt='effect' or cmt=4 dvid='effect' or dvid=2 #>   * If dvids are outside this range, all dvids are re-numered sequentially, ie 1,7, 10 becomes 1,2,3 etc #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         effectSd <- c(0, 0.1) #>         label(\"additive error for effect\") #>         lEmax <- 0.1 #>         label(\"Maximum effect (Emax)\") #>         lEC50 <- 0.1 #>         label(\"Concentration of 50% Emax (Emax)\") #>     }) #>     model({ #>         Emax <- exp(lEmax) #>         EC50 <- exp(lEC50) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         q <- exp(lq) #>         kel <- cl/vc #>         k12 <- q/vc #>         k21 <- q/vp #>         d/dt(central) <- kel * central - k12 * central + k21 *  #>             peripheral1 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>         effect <- Emax * Cc/(Cc + EC50) #>         effect ~ add(effectSd) #>     }) #> }"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addEffectCmtLin.html","id":null,"dir":"Reference","previous_headings":"","what":"Add effect compartment — addEffectCmtLin","title":"Add effect compartment — addEffectCmtLin","text":"Add effect compartment","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addEffectCmtLin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add effect compartment — addEffectCmtLin","text":"","code":"addEffectCmtLin(   ui,   ke0 = \"ke0\",   cc = \"Cc\",   ce = \"Ce\",   ek = \"Ek\",   effect = \"effect\" )"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addEffectCmtLin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add effect compartment — addEffectCmtLin","text":"ui rxode2 model ke0 effect compartment keo rate cc concentration value ce concentration effect compartment ek simulation linear constant effect effect variable modeled","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addEffectCmtLin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add effect compartment — addEffectCmtLin","text":"model effect compartment attached","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addEffectCmtLin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add effect compartment — addEffectCmtLin","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addEffectCmtLin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add effect compartment — addEffectCmtLin","text":"","code":"readModelDb(\"PK_2cmt_no_depot\") |>    addEffectCmtLin() #>   #>   #>  ── rxode2-based free-form 3-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>      lcl      lvc      lvp       lq   propSd     lke0      uEk effectSd  #>      1.0      3.0      5.0      0.1      0.5      0.1      0.1      0.1  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1          central #> 2                  2      peripheral1 #> 3                  3               Ce #>  ── Multiple Endpoint Model ($multipleEndpoint): ──   #>     variable                   cmt                   dvid* #> 1     Cc ~ …     cmt='Cc' or cmt=4     dvid='Cc' or dvid=1 #> 2 effect ~ … cmt='effect' or cmt=5 dvid='effect' or dvid=2 #>   * If dvids are outside this range, all dvids are re-numered sequentially, ie 1,7, 10 becomes 1,2,3 etc #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lke0 <- 0.1 #>         label(\"effect compartment rate (ke0)\") #>         uEk <- 0.1 #>         label(\"untransformed linear slope (Ek)\") #>         effectSd <- c(0, 0.1) #>         label(\"additive error for effect\") #>     }) #>     model({ #>         ke0 <- exp(lke0) #>         Ek <- uEk #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         q <- exp(lq) #>         kel <- cl/vc #>         k12 <- q/vc #>         k21 <- q/vp #>         d/dt(central) <- -kel * central - k12 * central + k21 *  #>             peripheral1 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>         d/dt(Ce) <- ke0 * (Cc - Ce) #>         effect <- Ce * Ek #>         effect ~ add(effectSd) #>     }) #> }  # Can also be changed to the more typical Emax with constant (estimated) baselie readModelDb(\"PK_2cmt_no_depot\") |>   addEffectCmtLin() |>   convertEmaxHill() |>   addBaselineConst() #>   #>   #>  ── rxode2-based free-form 3-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>       lcl       lvc       lvp        lq    propSd      lke0  effectSd     lEmax  #>  1.000000  3.000000  5.000000  0.100000  0.500000  0.100000  0.100000  0.100000  #>     lEC50       lgg       uEb  #>  0.100000 -2.302585  0.100000  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1          central #> 2                  2      peripheral1 #> 3                  3               Ce #>  ── Multiple Endpoint Model ($multipleEndpoint): ──   #>     variable                   cmt                   dvid* #> 1     Cc ~ …     cmt='Cc' or cmt=4     dvid='Cc' or dvid=1 #> 2 effect ~ … cmt='effect' or cmt=5 dvid='effect' or dvid=2 #>   * If dvids are outside this range, all dvids are re-numered sequentially, ie 1,7, 10 becomes 1,2,3 etc #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lke0 <- 0.1 #>         label(\"effect compartment rate (ke0)\") #>         effectSd <- c(0, 0.1) #>         label(\"additive error for effect\") #>         lEmax <- 0.1 #>         label(\"Maximum effect (Emax)\") #>         lEC50 <- 0.1 #>         label(\"Concentration of 50% Emax (Emax)\") #>         lgg <- -2.30258509299405 #>         label(\"logit-constrained Hill coefficient g\") #>         uEb <- 0.1 #>         label(\"untransformed constant baseline (Eb)\") #>     }) #>     model({ #>         Eb <- uEb #>         Emax <- exp(lEmax) #>         EC50 <- exp(lEC50) #>         g <- expit(lgg, 0.1, 10) #>         ke0 <- exp(lke0) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         q <- exp(lq) #>         kel <- cl/vc #>         k12 <- q/vc #>         k21 <- q/vp #>         d/dt(central) <- kel * central - k12 * central + k21 *  #>             peripheral1 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>         d/dt(Ce) <- ke0 * (Cc - Ce) #>         effect <- Ce * Ek + Eb #>         effect ~ add(effectSd) #>     }) #> }"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addEta.html","id":null,"dir":"Reference","previous_headings":"","what":"Add random effects to a model — addEta","title":"Add random effects to a model — addEta","text":"Add random effects model","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addEta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add random effects to a model — addEta","text":"","code":"addEta(   ui,   eta,   priorName = getOption(\"nlmixr2lib.priorEta\", TRUE),   etaCombineType = c(\"default\", \"snake\", \"camel\", \"dot\", \"blank\") )"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addEta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add random effects to a model — addEta","text":"ui model function eta vector parameters add random effects (sometimes referred inter-individual variability, IIV) priorName logical, TRUE, parameter name specified `eta` used add eta value prior name used instead left handed side equation. etaCombineType option combine eta parameter name.  Can : \"default\", \"snake\", \"camel\", \"dot\", \"blank\"","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addEta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add random effects to a model — addEta","text":"model eta added requested parameters","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addEta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add random effects to a model — addEta","text":"Bill Denney, Richard Hooijmaijers & Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addEta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add random effects to a model — addEta","text":"","code":"library(rxode2) #> rxode2 3.0.4 using 2 threads (see ?getRxThreads) #>   no cache: create with `rxCreateCache()` readModelDb(\"PK_1cmt\") |> addEta(\"ka\") #>   #>   #>   #>   #> → Adding eta to lka instead of ka due to mu-referencing #>   #>   #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> ℹ promote `etaKa` to between subject variability with initial estimate 0.1 #> ℹ change initial estimate of `etaKa` to `0.1` #> function ()  #> { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         etaKa ~ 0.1 #>     }) #>     model({ #>         ka <- exp(lka + etaKa) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ prop(propSd) #>     }) #> } #> <environment: 0x5643ff548710>"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addIndirect.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an indirect response model to a PK model — addIndirect","title":"Add an indirect response model to a PK model — addIndirect","text":"Add indirect response model PK model","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addIndirect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an indirect response model to a PK model — addIndirect","text":"","code":"addIndirect(   ui,   stim = c(\"in\", \"out\"),   inhib = c(\"in\", \"out\"),   hill = FALSE,   ek = \"Ek\",   ik = \"Ik\",   emax = \"Emax\",   ec50 = \"EC50\",   imax = \"Imax\",   ic50 = \"IC50\",   kin = \"kin\",   kout = \"kout\",   g = \"g\",   cc = \"Cc\",   R = \"R\",   effect = \"effect\" )"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addIndirect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an indirect response model to a PK model — addIndirect","text":"ui rxode2 model stim type stimulation indirect response model: - ``: stimulation input - ``: stimulation output inhib type inhibition indirect response model: - ``: inhibition input - ``: inhibition output hill Boolean stating hill sigmoid coefficient added ek simulation linear constant ik inhibition linear constant emax Emax parameter ec50 EC50 parameter imax maximum inhibitory concentration ic50 concentration half Imax occurs kin kin parameter name kout kout parameter name g hill coefficient cc concentration value R drug response compartment effect effect variable modeled","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addIndirect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an indirect response model to a PK model — addIndirect","text":"pk model indirect response model added","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addIndirect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add an indirect response model to a PK model — addIndirect","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addIndirect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an indirect response model to a PK model — addIndirect","text":"","code":"readModelDb(\"PK_2cmt_no_depot\") |>   addIndirect(stim=\"in\",hill=TRUE) #>   #>   #>  ── rxode2-based free-form 3-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>       lcl       lvc       lvp        lq    propSd      lkin     lkout  effectSd  #>  1.000000  3.000000  5.000000  0.100000  0.500000  0.100000  0.100000  0.100000  #>     lEmax     lEC50       lgg  #>  0.100000  0.100000 -2.302585  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1          central #> 2                  2      peripheral1 #> 3                  3                R #>  ── Multiple Endpoint Model ($multipleEndpoint): ──   #>     variable                   cmt                   dvid* #> 1     Cc ~ …     cmt='Cc' or cmt=4     dvid='Cc' or dvid=1 #> 2 effect ~ … cmt='effect' or cmt=5 dvid='effect' or dvid=2 #>   * If dvids are outside this range, all dvids are re-numered sequentially, ie 1,7, 10 becomes 1,2,3 etc #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lkin <- 0.1 #>         label(\"zero order response production(kin)\") #>         lkout <- 0.1 #>         label(\"first order rate response loss (kout)\") #>         effectSd <- c(0, 0.1) #>         label(\"additive error for effect\") #>         lEmax <- 0.1 #>         label(\"Maximum effect (Emax)\") #>         lEC50 <- 0.1 #>         label(\"Concentration of 50% Emax (Emax)\") #>         lgg <- -2.30258509299405 #>         label(\"logit-constrained Hill coefficient g\") #>     }) #>     model({ #>         Emax <- exp(lEmax) #>         EC50 <- exp(lEC50) #>         g <- expit(lgg, 0.1, 10) #>         kin <- exp(lkin) #>         kout <- exp(lkout) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         q <- exp(lq) #>         kel <- cl/vc #>         k12 <- q/vc #>         k21 <- q/vp #>         d/dt(central) <- kel * central - k12 * central + k21 *  #>             peripheral1 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>         R(0) <- kin/kout #>         d/dt(R) <- kin * (1 + Emax * Cc^g/(Cc^g + EC50^g)) -  #>             kout * R #>         effect <- R #>         effect ~ add(effectSd) #>     }) #> }  readModelDb(\"PK_2cmt_no_depot\") |>   addIndirect(inhib=\"out\", imax=1) #>   #>   #>  ── rxode2-based free-form 3-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>      lcl      lvc      lvp       lq   propSd     lkin    lkout effectSd  #>      1.0      3.0      5.0      0.1      0.5      0.1      0.1      0.1  #>    lImax    lIC50  #>      0.1      0.1  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1          central #> 2                  2      peripheral1 #> 3                  3                R #>  ── Multiple Endpoint Model ($multipleEndpoint): ──   #>     variable                   cmt                   dvid* #> 1     Cc ~ …     cmt='Cc' or cmt=4     dvid='Cc' or dvid=1 #> 2 effect ~ … cmt='effect' or cmt=5 dvid='effect' or dvid=2 #>   * If dvids are outside this range, all dvids are re-numered sequentially, ie 1,7, 10 becomes 1,2,3 etc #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lkin <- 0.1 #>         label(\"zero order response production(kin)\") #>         lkout <- 0.1 #>         label(\"first order rate response loss (kout)\") #>         effectSd <- c(0, 0.1) #>         label(\"additive error for effect\") #>         lImax <- 0.1 #>         label(\"Maximum effect (Imax)\") #>         lIC50 <- 0.1 #>         label(\"Concentration of 50% Imax (Imax)\") #>     }) #>     model({ #>         Imax <- exp(lImax) #>         IC50 <- exp(lIC50) #>         kin <- exp(lkin) #>         kout <- exp(lkout) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         q <- exp(lq) #>         kel <- cl/vc #>         k12 <- q/vc #>         k21 <- q/vp #>         d/dt(central) <- kel * central - k12 * central + k21 *  #>             peripheral1 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>         R(0) <- kin/kout #>         d/dt(R) <- kin - kout * R * (1 - Imax * Cc/(Cc + IC50)) #>         effect <- R #>         effect ~ add(effectSd) #>     }) #> }"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addIndirectLin.html","id":null,"dir":"Reference","previous_headings":"","what":"Add linear indirect response model — addIndirectLin","title":"Add linear indirect response model — addIndirectLin","text":"Add linear indirect response model","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addIndirectLin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add linear indirect response model — addIndirectLin","text":"","code":"addIndirectLin(   ui,   stim = c(\"in\", \"out\"),   inhib = c(\"in\", \"out\"),   ek = \"Ek\",   ik = \"Ik\",   kin = \"kin\",   kout = \"kout\",   cc = \"Cc\",   R = \"R\",   effect = \"effect\" )"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addIndirectLin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add linear indirect response model — addIndirectLin","text":"ui rxode2 model stim type stimulation indirect response model: - ``: stimulation input - ``: stimulation output inhib type inhibition indirect response model: - ``: inhibition input - ``: inhibition output ek simulation linear constant ik inhibition linear constant kin kin parameter name kout kout parameter name cc concentration value R drug response compartment effect effect variable modeled","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addIndirectLin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add linear indirect response model — addIndirectLin","text":"model linear indirect effect added Note linear indirect effects common, allows easier hook produce standard effect curves like Emax/Imax, Hill, etc.","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addIndirectLin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add linear indirect response model — addIndirectLin","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addIndirectLin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add linear indirect response model — addIndirectLin","text":"","code":"readModelDb(\"PK_2cmt_no_depot\") |> addIndirectLin(stim=\"in\") #>   #>   #>  ── rxode2-based free-form 3-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>      lcl      lvc      lvp       lq   propSd     lkin    lkout      lEk  #>      1.0      3.0      5.0      0.1      0.5      0.1      0.1      0.1  #> effectSd  #>      0.1  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1          central #> 2                  2      peripheral1 #> 3                  3                R #>  ── Multiple Endpoint Model ($multipleEndpoint): ──   #>     variable                   cmt                   dvid* #> 1     Cc ~ …     cmt='Cc' or cmt=4     dvid='Cc' or dvid=1 #> 2 effect ~ … cmt='effect' or cmt=5 dvid='effect' or dvid=2 #>   * If dvids are outside this range, all dvids are re-numered sequentially, ie 1,7, 10 becomes 1,2,3 etc #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lkin <- 0.1 #>         label(\"zero order response production(kin)\") #>         lkout <- 0.1 #>         label(\"first order rate response loss (kout)\") #>         lEk <- 0.1 #>         label(\"linear effect constant (Ek)\") #>         effectSd <- c(0, 0.1) #>         label(\"additive error for effect\") #>     }) #>     model({ #>         kin <- exp(lkin) #>         kout <- exp(lkout) #>         Ek <- exp(lEk) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         q <- exp(lq) #>         kel <- cl/vc #>         k12 <- q/vc #>         k21 <- q/vp #>         d/dt(central) <- -kel * central - k12 * central + k21 *  #>             peripheral1 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>         R(0) <- kin/kout #>         d/dt(R) <- kin * (1 + Ek * Cc) - kout * R #>         effect <- R #>         effect ~ add(effectSd) #>     }) #> }  readModelDb(\"PK_2cmt_no_depot\") |> addIndirectLin(stim=\"out\") #>   #>   #>  ── rxode2-based free-form 3-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>      lcl      lvc      lvp       lq   propSd     lkin    lkout      lEk  #>      1.0      3.0      5.0      0.1      0.5      0.1      0.1      0.1  #> effectSd  #>      0.1  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1          central #> 2                  2      peripheral1 #> 3                  3                R #>  ── Multiple Endpoint Model ($multipleEndpoint): ──   #>     variable                   cmt                   dvid* #> 1     Cc ~ …     cmt='Cc' or cmt=4     dvid='Cc' or dvid=1 #> 2 effect ~ … cmt='effect' or cmt=5 dvid='effect' or dvid=2 #>   * If dvids are outside this range, all dvids are re-numered sequentially, ie 1,7, 10 becomes 1,2,3 etc #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lkin <- 0.1 #>         label(\"zero order response production(kin)\") #>         lkout <- 0.1 #>         label(\"first order rate response loss (kout)\") #>         lEk <- 0.1 #>         label(\"linear effect constant (Ek)\") #>         effectSd <- c(0, 0.1) #>         label(\"additive error for effect\") #>     }) #>     model({ #>         kin <- exp(lkin) #>         kout <- exp(lkout) #>         Ek <- exp(lEk) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         q <- exp(lq) #>         kel <- cl/vc #>         k12 <- q/vc #>         k21 <- q/vp #>         d/dt(central) <- -kel * central - k12 * central + k21 *  #>             peripheral1 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>         R(0) <- kin/kout #>         d/dt(R) <- kin - kout * R * (1 + Ek * Cc) #>         effect <- R #>         effect ~ add(effectSd) #>     }) #> }  readModelDb(\"PK_2cmt_no_depot\") |> addIndirectLin(inhib=\"in\") #>   #>   #>  ── rxode2-based free-form 3-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>      lcl      lvc      lvp       lq   propSd     lkin    lkout      lIk  #>      1.0      3.0      5.0      0.1      0.5      0.1      0.1      0.1  #> effectSd  #>      0.1  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1          central #> 2                  2      peripheral1 #> 3                  3                R #>  ── Multiple Endpoint Model ($multipleEndpoint): ──   #>     variable                   cmt                   dvid* #> 1     Cc ~ …     cmt='Cc' or cmt=4     dvid='Cc' or dvid=1 #> 2 effect ~ … cmt='effect' or cmt=5 dvid='effect' or dvid=2 #>   * If dvids are outside this range, all dvids are re-numered sequentially, ie 1,7, 10 becomes 1,2,3 etc #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lkin <- 0.1 #>         label(\"zero order response production(kin)\") #>         lkout <- 0.1 #>         label(\"first order rate response loss (kout)\") #>         lIk <- c(-Inf, 0.1, 1) #>         label(\"linear inhibition constant (Ik)\") #>         effectSd <- c(0, 0.1) #>         label(\"additive error for effect\") #>     }) #>     model({ #>         kin <- exp(lkin) #>         kout <- exp(lkout) #>         Ik <- exp(lIk) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         q <- exp(lq) #>         kel <- cl/vc #>         k12 <- q/vc #>         k21 <- q/vp #>         d/dt(central) <- -kel * central - k12 * central + k21 *  #>             peripheral1 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>         R(0) <- kin/kout #>         d/dt(R) <- kin * (1 - Ik * Cc) - kout * R #>         effect <- R #>         effect ~ add(effectSd) #>     }) #> }  readModelDb(\"PK_2cmt_no_depot\") |> addIndirectLin(inhib=\"out\") #>   #>   #>  ── rxode2-based free-form 3-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>      lcl      lvc      lvp       lq   propSd     lkin    lkout      lIk  #>      1.0      3.0      5.0      0.1      0.5      0.1      0.1      0.1  #> effectSd  #>      0.1  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1          central #> 2                  2      peripheral1 #> 3                  3                R #>  ── Multiple Endpoint Model ($multipleEndpoint): ──   #>     variable                   cmt                   dvid* #> 1     Cc ~ …     cmt='Cc' or cmt=4     dvid='Cc' or dvid=1 #> 2 effect ~ … cmt='effect' or cmt=5 dvid='effect' or dvid=2 #>   * If dvids are outside this range, all dvids are re-numered sequentially, ie 1,7, 10 becomes 1,2,3 etc #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lkin <- 0.1 #>         label(\"zero order response production(kin)\") #>         lkout <- 0.1 #>         label(\"first order rate response loss (kout)\") #>         lIk <- c(-Inf, 0.1, 1) #>         label(\"linear inhibition constant (Ik)\") #>         effectSd <- c(0, 0.1) #>         label(\"additive error for effect\") #>     }) #>     model({ #>         kin <- exp(lkin) #>         kout <- exp(lkout) #>         Ik <- exp(lIk) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         q <- exp(lq) #>         kel <- cl/vc #>         k12 <- q/vc #>         k21 <- q/vp #>         d/dt(central) <- -kel * central - k12 * central + k21 *  #>             peripheral1 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>         R(0) <- kin/kout #>         d/dt(R) <- kin - kout * R * (1 - Ik * Cc) #>         effect <- R #>         effect ~ add(effectSd) #>     }) #> }"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addLogEstimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Add log estimates to a model — addLogEstimates","title":"Add log estimates to a model — addLogEstimates","text":"Add log estimates model","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addLogEstimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add log estimates to a model — addLogEstimates","text":"","code":"addLogEstimates(ui, vars, extraLines = NULL, beforeCmt = NULL)"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addLogEstimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add log estimates to a model — addLogEstimates","text":"ui rxode2 model vars estimates add parameterized : var <- exp(lvar) var variable name model lvar log transformed variable estimated extraLines list additional lines add model just variables defined.  must NULL list language objects. beforeCmt model compartmental can specify preferred names estimates extra lines added ","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addLogEstimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add log estimates to a model — addLogEstimates","text":"rxode2 model log estimates added (possibly extra lines)","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addLogEstimates.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add log estimates to a model — addLogEstimates","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addLogEstimates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add log estimates to a model — addLogEstimates","text":"","code":"# Change the transformation of the PK model from cl to k  readModelDb(\"PK_3cmt_des\") |>   removeLinesAndInis(c(\"kel\", \"k12\", \"k21\", \"k13\", \"k31\", \"vc\")) |>   addLogEstimates(c(\"kel\", \"k12\", \"k21\", \"k13\", \"k31\", \"vc\")) #>   #>   #>  ── rxode2-based free-form 4-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>    lka propSd   lkel   lk12   lk21   lk13   lk31    lvc  #>   0.45   0.50   0.10   0.10   0.10   0.10   0.10   0.10  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1            depot #> 2                  2          central #> 3                  3      peripheral1 #> 4                  4      peripheral2 #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lkel <- 0.1 #>         lk12 <- 0.1 #>         lk21 <- 0.1 #>         lk13 <- 0.1 #>         lk31 <- 0.1 #>         lvc <- 0.1 #>     }) #>     model({ #>         kel <- exp(lkel) #>         k12 <- exp(lk12) #>         k21 <- exp(lk21) #>         k13 <- exp(lk13) #>         k31 <- exp(lk31) #>         vc <- exp(lvc) #>         ka <- exp(lka) #>         d/dt(depot) <- -ka * depot #>         d/dt(central) <- ka * depot - kel * central - k12 * central +  #>             k21 * peripheral1 - k13 * central + k31 * peripheral2 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         d/dt(peripheral2) <- k13 * central - k31 * peripheral2 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>     }) #> }  # You can also label the parameters by using a named character # vector with the names of the parameters representing the # variables and the values representing the labels:  readModelDb(\"PK_3cmt_des\") |>   removeLinesAndInis(c(\"kel\", \"k12\", \"k21\", \"k13\", \"k31\", \"vc\")) |>   addLogEstimates(c(kel=\"elimination\", k12=\"k12 constant\",                     k21=\"k21 constant\",                     k13=\"k13 constant\",                     k31=\"k31 constant\",                     vc=\"volume of central compartment\")) #>   #>   #>  ── rxode2-based free-form 4-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>    lka propSd   lkel   lk12   lk21   lk13   lk31    lvc  #>   0.45   0.50   0.10   0.10   0.10   0.10   0.10   0.10  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1            depot #> 2                  2          central #> 3                  3      peripheral1 #> 4                  4      peripheral2 #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lkel <- 0.1 #>         label(\"elimination\") #>         lk12 <- 0.1 #>         label(\"k12 constant\") #>         lk21 <- 0.1 #>         label(\"k21 constant\") #>         lk13 <- 0.1 #>         label(\"k13 constant\") #>         lk31 <- 0.1 #>         label(\"k31 constant\") #>         lvc <- 0.1 #>         label(\"volume of central compartment\") #>     }) #>     model({ #>         kel <- exp(lkel) #>         k12 <- exp(lk12) #>         k21 <- exp(lk21) #>         k13 <- exp(lk13) #>         k31 <- exp(lk31) #>         vc <- exp(lvc) #>         ka <- exp(lka) #>         d/dt(depot) <- -ka * depot #>         d/dt(central) <- ka * depot - kel * central - k12 * central +  #>             k21 * peripheral1 - k13 * central + k31 * peripheral2 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         d/dt(peripheral2) <- k13 * central - k31 * peripheral2 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>     }) #> }"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addResErr.html","id":null,"dir":"Reference","previous_headings":"","what":"Add residual error to a model — addResErr","title":"Add residual error to a model — addResErr","text":"Add residual error model","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addResErr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add residual error to a model — addResErr","text":"","code":"addResErr(ui, reserr, endpoint)"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addResErr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add residual error to a model — addResErr","text":"ui model function reserr type types residual error (currently \"addSd\", \"propSd\", \"lnormSd\" accepted) endpoint endpoint apply error; default first error model","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addResErr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add residual error to a model — addResErr","text":"model residual error modified","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addResErr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add residual error to a model — addResErr","text":"reserr, parameter named dependent   variable model prefix.  example, dependent   variable model Cc, parameter name propSd   become CcpropSd.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addResErr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add residual error to a model — addResErr","text":"","code":"library(rxode2) readModelDb(\"PK_1cmt\") |> addResErr(\"addSd\") #>   #>   #>   #>   #> ! remove population parameter `propSd` #> ℹ add residual parameter `CcAddSd` and set estimate to 1 #> ℹ change initial estimate of `CcAddSd` to `1` #>  ── rxode2-based solved PK 1-compartment model with first-order absorption ──────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>     lka     lcl     lvc CcAddSd  #>    0.45    1.00    3.45    1.00  #>  ── Model (Normalized Syntax): ──  #> function() { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         CcAddSd <- c(0, 1) #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ add(CcAddSd) #>     }) #> } readModelDb(\"PK_1cmt\") |> addResErr(\"lnormSd\") #>   #>   #>   #>   #> ! remove population parameter `propSd` #> ℹ add residual parameter `CcLnormSd` and set estimate to 1 #> ℹ change initial estimate of `CcLnormSd` to `0.5` #>  ── rxode2-based solved PK 1-compartment model with first-order absorption ──────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>       lka       lcl       lvc CcLnormSd  #>      0.45      1.00      3.45      0.50  #>  ── Model (Normalized Syntax): ──  #> function() { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         CcLnormSd <- c(0, 0.5) #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ lnorm(CcLnormSd) #>     }) #> } readModelDb(\"PK_1cmt\") |> addResErr(c(\"addSd\", \"propSd\")) #>   #>   #>   #>   #> ! remove population parameter `propSd` #> ℹ add residual parameter `CcAddSd` and set estimate to 1 #> ℹ add residual parameter `CcPropSd` and set estimate to 1 #> ℹ change initial estimate of `CcAddSd` to `1` #> ℹ change initial estimate of `CcPropSd` to `0.5` #>  ── rxode2-based solved PK 1-compartment model with first-order absorption ──────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>      lka      lcl      lvc  CcAddSd CcPropSd  #>     0.45     1.00     3.45     1.00     0.50  #>  ── Model (Normalized Syntax): ──  #> function() { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         CcAddSd <- c(0, 1) #>         CcPropSd <- c(0, 0.5) #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ add(CcAddSd) + prop(CcPropSd) #>     }) #> }"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addTransit.html","id":null,"dir":"Reference","previous_headings":"","what":"To add transit compartments to the model — addTransit","title":"To add transit compartments to the model — addTransit","text":"add transit compartments model","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addTransit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"To add transit compartments to the model — addTransit","text":"","code":"addTransit(   ui,   ntransit,   central = \"central\",   depot = \"depot\",   transit = \"transit\",   ktr = \"ktr\",   ka = \"ka\" )"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addTransit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"To add transit compartments to the model — addTransit","text":"ui model function ntransit number transit compartments added central central compartment name depot depot compartment name transit transit compartment prefix ktr parameter name transit compartment rate ka absorption rate parameter name","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addTransit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"To add transit compartments to the model — addTransit","text":"model transit compartment added matches `dose->a0->a1->abs cmt->central` `a0` depot dosing records labeled depot need changed abs cmt becomes last \"transit\" compartment simply convenience","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addTransit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"To add transit compartments to the model — addTransit","text":"","code":"readModelDb(\"PK_1cmt_des\") |> addTransit(3) #>   #>   #>  ── rxode2-based free-form 5-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>    lka    lcl    lvc propSd   lktr  #>   0.45   1.00   3.45   0.50   0.10  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1            depot #> 2                  2         transit1 #> 3                  3         transit2 #> 4                  4         transit3 #> 5                  5          central #>  ── Model (Normalized Syntax): ──  #> function() { #>     dosing <- c(\"central\", \"depot\") #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lktr <- 0.1 #>         label(\"First order transition rate (ktr)\") #>     }) #>     model({ #>         ktr <- exp(lktr) #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         kel <- cl/vc #>         d/dt(depot) <- -ktr * depot #>         d/dt(transit1) <- ktr * depot - ktr * transit1 #>         d/dt(transit2) <- ktr * transit1 - ktr * transit2 #>         d/dt(transit3) <- ktr * transit2 - ka * transit3 #>         d/dt(central) <- ka * transit3 - kel * central #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>     }) #> }"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addWeibullAbs.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts first order absorption model to Weibull absorption model — addWeibullAbs","title":"Converts first order absorption model to Weibull absorption model — addWeibullAbs","text":"Converts first order absorption model Weibull absorption model","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addWeibullAbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts first order absorption model to Weibull absorption model — addWeibullAbs","text":"","code":"addWeibullAbs(   ui,   ntransit,   central = \"central\",   depot = \"depot\",   transit = \"transit\",   wa = \"wa\",   wb = \"wb\",   ka = \"ka\",   ktr = \"ktr\" )"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addWeibullAbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts first order absorption model to Weibull absorption model — addWeibullAbs","text":"ui model function ntransit number transit compartments added central central compartment name depot depot compartment name transit transit compartment prefix wa Weibull alpha parameter name wb Weibull beta parameter name ka absorption rate parameter name ktr parameter name transit compartment rate","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addWeibullAbs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts first order absorption model to Weibull absorption model — addWeibullAbs","text":"model first order absorption changed Weibull absorption model","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addWeibullAbs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Converts first order absorption model to Weibull absorption model — addWeibullAbs","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/addWeibullAbs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts first order absorption model to Weibull absorption model — addWeibullAbs","text":"","code":"readModelDb(\"PK_1cmt_des\") |>   addWeibullAbs() #>   #>   #>  ── rxode2-based free-form 2-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>    lcl    lvc propSd    lwa    lwb  #>   1.00   3.45   0.50   0.10   0.10  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1            depot #> 2                  2          central #>  ── Model (Normalized Syntax): ──  #> function() { #>     dosing <- c(\"central\", \"depot\") #>     ini({ #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lwa <- 0.1 #>         label(\"Weibull absorption alpha (wa)\") #>         lwb <- 0.1 #>         label(\"Weibull absorption beta (wa)\") #>     }) #>     model({ #>         wa <- exp(lwa) #>         wb <- exp(lwb) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         kel <- cl/vc #>         d/dt(depot) <- -(wb/wa) * (tad0(depot)/wa)^(wb - 1) *  #>             depot #>         d/dt(central) <- (wb/wa) * (tad0(depot)/wa)^(wb - 1) *  #>             depot - kel * central #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>     }) #> }"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/combinePaste2.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine two strings using a naming convention — combinePaste2","title":"Combine two strings using a naming convention — combinePaste2","text":"Combine two manner similar `paste()` strings using default combine type","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/combinePaste2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine two strings using a naming convention — combinePaste2","text":"","code":"combinePaste2(   a,   b,   combineType = c(\"default\", \"snake\", \"camel\", \"dot\", \"blank\") )"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/combinePaste2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine two strings using a naming convention — combinePaste2","text":"first string combine b second string combine combineType type combination; can : - \"default\": default combine (set `defaultCombine()`) - \"camel\": camelCase combine - \"snake\": snake_case combine - \"dot\": dot combine (.e. \".b\") - \"blank\": separator (.e. \"ab\")","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/combinePaste2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine two strings using a naming convention — combinePaste2","text":"Combined strings separated `defaultCombine()`","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/combinePaste2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Combine two strings using a naming convention — combinePaste2","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/combinePaste2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine two strings using a naming convention — combinePaste2","text":"","code":"combinePaste2(\"f\", \"depot\") #> [1] \"fDepot\"  combinePaste2(\"f\", \"depot\", \"snake\") #> [1] \"f_depot\"  combinePaste2(\"f\", \"depot\", \"dot\") #> [1] \"f.depot\"  combinePaste2(\"f\", \"depot\", \"blank\") #> [1] \"fdepot\""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertEmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert linear effect to Emax effect — convertEmax","title":"Convert linear effect to Emax effect — convertEmax","text":"Convert linear effect Emax effect","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertEmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert linear effect to Emax effect — convertEmax","text":"","code":"convertEmax(   ui,   emax = \"Emax\",   ec50 = \"EC50\",   imax = \"Imax\",   ic50 = \"IC50\",   ek = c(\"Ik\", \"Ek\"),   cc = c(\"Ec\", \"Cc\") )"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertEmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert linear effect to Emax effect — convertEmax","text":"ui rxode2 model emax Emax parameter ec50 EC50 parameter imax Imax parameter used input model contains \"Ik\" instead \"Ek\" ic50 IC50 parameter used input model contains \"Ik\" instead \"Ek\" ek simulation linear constant cc concentration value","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertEmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert linear effect to Emax effect — convertEmax","text":"Model linear effect converted Emax effect","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertEmax.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert linear effect to Emax effect — convertEmax","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertEmax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert linear effect to Emax effect — convertEmax","text":"","code":"readModelDb(\"PK_2cmt_no_depot\") |>   addIndirectLin(stim=\"in\") |>   convertEmax() #>   #>   #>  ── rxode2-based free-form 3-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>      lcl      lvc      lvp       lq   propSd     lkin    lkout effectSd  #>      1.0      3.0      5.0      0.1      0.5      0.1      0.1      0.1  #>    lEmax    lEC50  #>      0.1      0.1  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1          central #> 2                  2      peripheral1 #> 3                  3                R #>  ── Multiple Endpoint Model ($multipleEndpoint): ──   #>     variable                   cmt                   dvid* #> 1     Cc ~ …     cmt='Cc' or cmt=4     dvid='Cc' or dvid=1 #> 2 effect ~ … cmt='effect' or cmt=5 dvid='effect' or dvid=2 #>   * If dvids are outside this range, all dvids are re-numered sequentially, ie 1,7, 10 becomes 1,2,3 etc #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lkin <- 0.1 #>         label(\"zero order response production(kin)\") #>         lkout <- 0.1 #>         label(\"first order rate response loss (kout)\") #>         effectSd <- c(0, 0.1) #>         label(\"additive error for effect\") #>         lEmax <- 0.1 #>         label(\"Maximum effect (Emax)\") #>         lEC50 <- 0.1 #>         label(\"Concentration of 50% Emax (Emax)\") #>     }) #>     model({ #>         Emax <- exp(lEmax) #>         EC50 <- exp(lEC50) #>         kin <- exp(lkin) #>         kout <- exp(lkout) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         q <- exp(lq) #>         kel <- cl/vc #>         k12 <- q/vc #>         k21 <- q/vp #>         d/dt(central) <- kel * central - k12 * central + k21 *  #>             peripheral1 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>         R(0) <- kin/kout #>         d/dt(R) <- kin * (1 + Emax * Cc/(Cc + EC50)) - kout *  #>             R #>         effect <- R #>         effect ~ add(effectSd) #>     }) #> }  # When emax=1 readModelDb(\"PK_2cmt_no_depot\") |>   addIndirectLin(stim=\"in\") |>   convertEmax(emax=1) #>   #>   #>  ── rxode2-based free-form 3-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>      lcl      lvc      lvp       lq   propSd     lkin    lkout effectSd  #>      1.0      3.0      5.0      0.1      0.5      0.1      0.1      0.1  #>    lEC50  #>      0.1  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1          central #> 2                  2      peripheral1 #> 3                  3                R #>  ── Multiple Endpoint Model ($multipleEndpoint): ──   #>     variable                   cmt                   dvid* #> 1     Cc ~ …     cmt='Cc' or cmt=4     dvid='Cc' or dvid=1 #> 2 effect ~ … cmt='effect' or cmt=5 dvid='effect' or dvid=2 #>   * If dvids are outside this range, all dvids are re-numered sequentially, ie 1,7, 10 becomes 1,2,3 etc #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lkin <- 0.1 #>         label(\"zero order response production(kin)\") #>         lkout <- 0.1 #>         label(\"first order rate response loss (kout)\") #>         effectSd <- c(0, 0.1) #>         label(\"additive error for effect\") #>         lEC50 <- 0.1 #>         label(\"Concentration of 50% 1 (1)\") #>     }) #>     model({ #>         EC50 <- exp(lEC50) #>         kin <- exp(lkin) #>         kout <- exp(lkout) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         q <- exp(lq) #>         kel <- cl/vc #>         k12 <- q/vc #>         k21 <- q/vp #>         d/dt(central) <- kel * central - k12 * central + k21 *  #>             peripheral1 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>         R(0) <- kin/kout #>         d/dt(R) <- kin * (1 + Cc/(Cc + EC50)) - kout * R #>         effect <- R #>         effect ~ add(effectSd) #>     }) #> }"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertEmaxHill.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert linear effect to Emax-Hill effect — convertEmaxHill","title":"Convert linear effect to Emax-Hill effect — convertEmaxHill","text":"Convert linear effect Emax-Hill effect","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertEmaxHill.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert linear effect to Emax-Hill effect — convertEmaxHill","text":"","code":"convertEmaxHill(   ui,   emax = \"Emax\",   ec50 = \"EC50\",   g = \"g\",   imax = \"Imax\",   ic50 = \"IC50\",   ek = c(\"Ik\", \"Ek\"),   cc = c(\"Ec\", \"Cc\") )"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertEmaxHill.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert linear effect to Emax-Hill effect — convertEmaxHill","text":"ui rxode2 model emax Emax parameter ec50 EC50 parameter g hill coefficient imax Imax parameter used input model contains \"Ik\" instead \"Ek\" ic50 IC50 parameter used input model contains \"Ik\" instead \"Ek\" ek simulation linear constant cc concentration value","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertEmaxHill.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert linear effect to Emax-Hill effect — convertEmaxHill","text":"Model linear effect converted Emax effect","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertEmaxHill.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert linear effect to Emax-Hill effect — convertEmaxHill","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertEmaxHill.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert linear effect to Emax-Hill effect — convertEmaxHill","text":"","code":"readModelDb(\"PK_2cmt_no_depot\") |>   addIndirectLin(stim=\"in\") |>   convertEmaxHill() #>   #>   #>  ── rxode2-based free-form 3-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>       lcl       lvc       lvp        lq    propSd      lkin     lkout  effectSd  #>  1.000000  3.000000  5.000000  0.100000  0.500000  0.100000  0.100000  0.100000  #>     lEmax     lEC50       lgg  #>  0.100000  0.100000 -2.302585  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1          central #> 2                  2      peripheral1 #> 3                  3                R #>  ── Multiple Endpoint Model ($multipleEndpoint): ──   #>     variable                   cmt                   dvid* #> 1     Cc ~ …     cmt='Cc' or cmt=4     dvid='Cc' or dvid=1 #> 2 effect ~ … cmt='effect' or cmt=5 dvid='effect' or dvid=2 #>   * If dvids are outside this range, all dvids are re-numered sequentially, ie 1,7, 10 becomes 1,2,3 etc #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lkin <- 0.1 #>         label(\"zero order response production(kin)\") #>         lkout <- 0.1 #>         label(\"first order rate response loss (kout)\") #>         effectSd <- c(0, 0.1) #>         label(\"additive error for effect\") #>         lEmax <- 0.1 #>         label(\"Maximum effect (Emax)\") #>         lEC50 <- 0.1 #>         label(\"Concentration of 50% Emax (Emax)\") #>         lgg <- -2.30258509299405 #>         label(\"logit-constrained Hill coefficient g\") #>     }) #>     model({ #>         Emax <- exp(lEmax) #>         EC50 <- exp(lEC50) #>         g <- expit(lgg, 0.1, 10) #>         kin <- exp(lkin) #>         kout <- exp(lkout) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         q <- exp(lq) #>         kel <- cl/vc #>         k12 <- q/vc #>         k21 <- q/vp #>         d/dt(central) <- kel * central - k12 * central + k21 *  #>             peripheral1 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>         R(0) <- kin/kout #>         d/dt(R) <- kin * (1 + Emax * Cc^g/(Cc^g + EC50^g)) -  #>             kout * R #>         effect <- R #>         effect ~ add(effectSd) #>     }) #> }  # can also specify as emax=1  readModelDb(\"PK_2cmt_no_depot\") |>   addIndirectLin(stim=\"in\") |>   convertEmaxHill(emax=1) #>   #>   #>  ── rxode2-based free-form 3-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>       lcl       lvc       lvp        lq    propSd      lkin     lkout  effectSd  #>  1.000000  3.000000  5.000000  0.100000  0.500000  0.100000  0.100000  0.100000  #>     lEC50       lgg  #>  0.100000 -2.302585  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1          central #> 2                  2      peripheral1 #> 3                  3                R #>  ── Multiple Endpoint Model ($multipleEndpoint): ──   #>     variable                   cmt                   dvid* #> 1     Cc ~ …     cmt='Cc' or cmt=4     dvid='Cc' or dvid=1 #> 2 effect ~ … cmt='effect' or cmt=5 dvid='effect' or dvid=2 #>   * If dvids are outside this range, all dvids are re-numered sequentially, ie 1,7, 10 becomes 1,2,3 etc #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lkin <- 0.1 #>         label(\"zero order response production(kin)\") #>         lkout <- 0.1 #>         label(\"first order rate response loss (kout)\") #>         effectSd <- c(0, 0.1) #>         label(\"additive error for effect\") #>         lEC50 <- 0.1 #>         label(\"Concentration of 50% 1 (1)\") #>         lgg <- -2.30258509299405 #>         label(\"logit-constrained Hill coefficient g\") #>     }) #>     model({ #>         EC50 <- exp(lEC50) #>         g <- expit(lgg, 0.1, 10) #>         kin <- exp(lkin) #>         kout <- exp(lkout) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         q <- exp(lq) #>         kel <- cl/vc #>         k12 <- q/vc #>         k21 <- q/vp #>         d/dt(central) <- kel * central - k12 * central + k21 *  #>             peripheral1 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>         R(0) <- kin/kout #>         d/dt(R) <- kin * (1 + Cc^g/(Cc^g + EC50^g)) - kout *  #>             R #>         effect <- R #>         effect ~ add(effectSd) #>     }) #> }"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertKinR0.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a kin/kout indirect response model to R0 and kout — convertKinR0","title":"Convert a kin/kout indirect response model to R0 and kout — convertKinR0","text":"replaces kin/kout parameterization R0 kout parameterization","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertKinR0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a kin/kout indirect response model to R0 and kout — convertKinR0","text":"","code":"convertKinR0(ui, kin = \"kin\", kout = \"kout\", R = \"R\", R0 = \"R0\")"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertKinR0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a kin/kout indirect response model to R0 and kout — convertKinR0","text":"ui rxode2 user function kin kin variable (default \"kin\") kout kout variable (default \"kout\") R compartment variable (default \"R\") R0 R0 variable (default \"R0\")","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertKinR0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a kin/kout indirect response model to R0 and kout — convertKinR0","text":"model estimated kin changed estimated R0","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertKinR0.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert a kin/kout indirect response model to R0 and kout — convertKinR0","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertKinR0.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a kin/kout indirect response model to R0 and kout — convertKinR0","text":"","code":"addIndirect(stim=\"in\") |> convertKinR0() #>   #>   #>  ── rxode2-based free-form 1-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>    lkout effectSd    lEmax    lEC50      uR0  #>      0.1      0.1      0.1      0.1      0.1  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1                R #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lkout <- 0.1 #>         label(\"first order rate response loss (kout)\") #>         effectSd <- c(0, 0.1) #>         label(\"additive error for effect\") #>         lEmax <- 0.1 #>         label(\"Maximum effect (Emax)\") #>         lEC50 <- 0.1 #>         label(\"Concentration of 50% Emax (Emax)\") #>         uR0 <- 0.1 #>         label(\"untransformed baseline (R0)\") #>     }) #>     model({ #>         R0 <- uR0 #>         Emax <- exp(lEmax) #>         EC50 <- exp(lEC50) #>         kout <- exp(lkout) #>         R(0) <- R0 #>         d/dt(R) <- kout * R0 * (1 + Emax * Cc/(Cc + EC50)) -  #>             kout * R #>         effect <- R #>         effect ~ add(effectSd) #>     }) #> }"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertLogLin.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts a linear effect to a log-linear effect — convertLogLin","title":"Converts a linear effect to a log-linear effect — convertLogLin","text":"Converts linear effect log-linear effect","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertLogLin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts a linear effect to a log-linear effect — convertLogLin","text":"","code":"convertLogLin(ui, ek = c(\"Ik\", \"Ek\"), cc = c(\"Ce\", \"Cc\"))"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertLogLin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts a linear effect to a log-linear effect — convertLogLin","text":"ui rxode2 model ek simulation linear constant cc concentration value","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertLogLin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts a linear effect to a log-linear effect — convertLogLin","text":"model converted linear log-linear effect","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertLogLin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Converts a linear effect to a log-linear effect — convertLogLin","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertLogLin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts a linear effect to a log-linear effect — convertLogLin","text":"","code":"readModelDb(\"PK_2cmt_no_depot\") |>   addDirectLin() |>   convertLogLin() #>   #>   #>  ── rxode2-based free-form 2-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>      lcl      lvc      lvp       lq   propSd      uEk effectSd  #>      1.0      3.0      5.0      0.1      0.5      0.1      0.1  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1          central #> 2                  2      peripheral1 #>  ── Multiple Endpoint Model ($multipleEndpoint): ──   #>     variable                   cmt                   dvid* #> 1     Cc ~ …     cmt='Cc' or cmt=3     dvid='Cc' or dvid=1 #> 2 effect ~ … cmt='effect' or cmt=4 dvid='effect' or dvid=2 #>   * If dvids are outside this range, all dvids are re-numered sequentially, ie 1,7, 10 becomes 1,2,3 etc #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         uEk <- 0.1 #>         label(\"untransformed slope (Ek)\") #>         effectSd <- c(0, 0.1) #>         label(\"additive error for effect\") #>     }) #>     model({ #>         Ek <- uEk #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         q <- exp(lq) #>         kel <- cl/vc #>         k12 <- q/vc #>         k21 <- q/vp #>         d/dt(central) <- kel * central - k12 * central + k21 *  #>             peripheral1 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>         effect <- Ek * log(Cc) #>         effect ~ add(effectSd) #>     }) #> }  readModelDb(\"PK_2cmt_no_depot\") |>   addIndirectLin(stim=\"out\") |>   convertLogLin() #>   #>   #>  ── rxode2-based free-form 3-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>      lcl      lvc      lvp       lq   propSd     lkin    lkout      lEk  #>      1.0      3.0      5.0      0.1      0.5      0.1      0.1      0.1  #> effectSd  #>      0.1  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1          central #> 2                  2      peripheral1 #> 3                  3                R #>  ── Multiple Endpoint Model ($multipleEndpoint): ──   #>     variable                   cmt                   dvid* #> 1     Cc ~ …     cmt='Cc' or cmt=4     dvid='Cc' or dvid=1 #> 2 effect ~ … cmt='effect' or cmt=5 dvid='effect' or dvid=2 #>   * If dvids are outside this range, all dvids are re-numered sequentially, ie 1,7, 10 becomes 1,2,3 etc #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lkin <- 0.1 #>         label(\"zero order response production(kin)\") #>         lkout <- 0.1 #>         label(\"first order rate response loss (kout)\") #>         lEk <- 0.1 #>         label(\"linear effect constant (Ek)\") #>         effectSd <- c(0, 0.1) #>         label(\"additive error for effect\") #>     }) #>     model({ #>         kin <- exp(lkin) #>         kout <- exp(lkout) #>         Ek <- exp(lEk) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         q <- exp(lq) #>         kel <- cl/vc #>         k12 <- q/vc #>         k21 <- q/vp #>         d/dt(central) <- kel * central - k12 * central + k21 *  #>             peripheral1 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>         R(0) <- kin/kout #>         d/dt(R) <- kin - kout * R * (1 + Ek * log(Cc)) #>         effect <- R #>         effect ~ add(effectSd) #>     }) #> }"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertMM.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert models from linear elimination to Michaelis-Menten elimination — convertMM","title":"Convert models from linear elimination to Michaelis-Menten elimination — convertMM","text":"Convert models linear elimination Michaelis-Menten elimination","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertMM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert models from linear elimination to Michaelis-Menten elimination — convertMM","text":"","code":"convertMM(   ui,   central = \"central\",   elimination = \"kel\",   vm = \"vm\",   km = \"km\",   vc = \"vc\" )"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertMM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert models from linear elimination to Michaelis-Menten elimination — convertMM","text":"ui model convert central central compartment elimination present elimination variable elimination constant model vm variable name Vmax model km variable name Km model vc variable name Vc model","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertMM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert models from linear elimination to Michaelis-Menten elimination — convertMM","text":"new model changing linear elimination Michaelis-Menten elimination","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertMM.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert models from linear elimination to Michaelis-Menten elimination — convertMM","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertMM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert models from linear elimination to Michaelis-Menten elimination — convertMM","text":"","code":"readModelDb(\"PK_1cmt_des\") |> convertMM() #>   #>   #>  ── rxode2-based free-form 2-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>    lka    lvc propSd    lvm    lkm  #>   0.45   3.45   0.50   0.10   0.10  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1            depot #> 2                  2          central #>  ── Model (Normalized Syntax): ──  #> function() { #>     dosing <- c(\"central\", \"depot\") #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lvm <- 0.1 #>         lkm <- 0.1 #>     }) #>     model({ #>         vm <- exp(lvm) #>         km <- exp(lkm) #>         ka <- exp(lka) #>         vc <- exp(lvc) #>         d/dt(depot) <- ka * depot #>         d/dt(central) <- ka * depot - (vm * central/vc)/(km +  #>             central/vc) #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>     }) #> }  readModelDb(\"PK_2cmt_des\") |> convertMM() #>   #>   #>  ── rxode2-based free-form 3-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>    lka    lvc    lvp     lq propSd    lvm    lkm  #>   0.45   3.00   5.00   0.10   0.50   0.10   0.10  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1            depot #> 2                  2          central #> 3                  3      peripheral1 #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lvm <- 0.1 #>         lkm <- 0.1 #>     }) #>     model({ #>         vm <- exp(lvm) #>         km <- exp(lkm) #>         ka <- exp(lka) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         q <- exp(lq) #>         k12 <- q/vc #>         k21 <- q/vp #>         d/dt(depot) <- ka * depot #>         d/dt(central) <- ka * depot - (vm * central/vc)/(km +  #>             central/vc) - k12 * central + k21 * peripheral1 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>     }) #> }  readModelDb(\"PK_3cmt_des\") |> convertMM() #>   #>   #>  ── rxode2-based free-form 4-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>    lka    lvc    lvp   lvp2     lq    lq2 propSd    lvm    lkm  #>   0.45   3.00   5.00   8.00   0.10   0.50   0.50   0.10   0.10  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1            depot #> 2                  2          central #> 3                  3      peripheral1 #> 4                  4      peripheral2 #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lvp2 <- 8 #>         label(\"Second peripheral volume of distribution (Vp2)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         lq2 <- 0.5 #>         label(\"Second intercompartmental clearance (Q2)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lvm <- 0.1 #>         lkm <- 0.1 #>     }) #>     model({ #>         vm <- exp(lvm) #>         km <- exp(lkm) #>         ka <- exp(lka) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         vp2 <- exp(lvp2) #>         q <- exp(lq) #>         q2 <- exp(lq2) #>         k12 <- q/vc #>         k21 <- q/vp #>         k13 <- q2/vc #>         k31 <- q2/vp2 #>         d/dt(depot) <- ka * depot #>         d/dt(central) <- ka * depot - (vm * central/vc)/(km +  #>             central/vc) - k12 * central + k21 * peripheral1 -  #>             k13 * central + k31 * peripheral2 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         d/dt(peripheral2) <- k13 * central - k31 * peripheral2 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>     }) #> }  readModelDb(\"PK_3cmt_des\") |> removeDepot() |> convertMM() #>   #>   #>  ── rxode2-based free-form 3-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>    lvc    lvp   lvp2     lq    lq2 propSd    lvm    lkm  #>    3.0    5.0    8.0    0.1    0.5    0.5    0.1    0.1  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1          central #> 2                  2      peripheral1 #> 3                  3      peripheral2 #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lvp2 <- 8 #>         label(\"Second peripheral volume of distribution (Vp2)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         lq2 <- 0.5 #>         label(\"Second intercompartmental clearance (Q2)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lvm <- 0.1 #>         lkm <- 0.1 #>     }) #>     model({ #>         vm <- exp(lvm) #>         km <- exp(lkm) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         vp2 <- exp(lvp2) #>         q <- exp(lq) #>         q2 <- exp(lq2) #>         k12 <- q/vc #>         k21 <- q/vp #>         k13 <- q2/vc #>         k31 <- q2/vp2 #>         d/dt(central) <- -(vm * central/vc)/(km + central/vc) -  #>             k12 * central + k21 * peripheral1 - k13 * central +  #>             k31 * peripheral2 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         d/dt(peripheral2) <- k13 * central - k31 * peripheral2 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>     }) #> }"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertQuad.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert linear elimination to quadratic elimination — convertQuad","title":"Convert linear elimination to quadratic elimination — convertQuad","text":"Convert linear elimination quadratic elimination","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertQuad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert linear elimination to quadratic elimination — convertQuad","text":"","code":"convertQuad(ui, ek = c(\"Ik\", \"Ek\"), cc = c(\"Ce\", \"Cc\"), ek2 = \"Ek2\")"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertQuad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert linear elimination to quadratic elimination — convertQuad","text":"ui rxode2 model ek simulation linear constant cc concentration value ek2 quadratic coefficient","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertQuad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert linear elimination to quadratic elimination — convertQuad","text":"model linear effect converted quadratic effect","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertQuad.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert linear elimination to quadratic elimination — convertQuad","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/convertQuad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert linear elimination to quadratic elimination — convertQuad","text":"","code":"readModelDb(\"PK_2cmt_no_depot\") |>   addIndirectLin(stim=\"out\") |>   convertQuad() #>   #>   #>  ── rxode2-based free-form 3-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>      lcl      lvc      lvp       lq   propSd     lkin    lkout      lEk  #>      1.0      3.0      5.0      0.1      0.5      0.1      0.1      0.1  #> effectSd     uEk2  #>      0.1      0.1  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1          central #> 2                  2      peripheral1 #> 3                  3                R #>  ── Multiple Endpoint Model ($multipleEndpoint): ──   #>     variable                   cmt                   dvid* #> 1     Cc ~ …     cmt='Cc' or cmt=4     dvid='Cc' or dvid=1 #> 2 effect ~ … cmt='effect' or cmt=5 dvid='effect' or dvid=2 #>   * If dvids are outside this range, all dvids are re-numered sequentially, ie 1,7, 10 becomes 1,2,3 etc #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lkin <- 0.1 #>         label(\"zero order response production(kin)\") #>         lkout <- 0.1 #>         label(\"first order rate response loss (kout)\") #>         lEk <- 0.1 #>         label(\"linear effect constant (Ek)\") #>         effectSd <- c(0, 0.1) #>         label(\"additive error for effect\") #>         uEk2 <- 0.1 #>         label(\"untransformed quadratic slope (Ek2)\") #>     }) #>     model({ #>         Ek2 <- uEk2 #>         kin <- exp(lkin) #>         kout <- exp(lkout) #>         Ek <- exp(lEk) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         q <- exp(lq) #>         kel <- cl/vc #>         k12 <- q/vc #>         k21 <- q/vp #>         d/dt(central) <- kel * central - k12 * central + k21 *  #>             peripheral1 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>         R(0) <- kin/kout #>         d/dt(R) <- kin - kout * R * (1 + (Ek * Cc + Ek2 * Cc^2)) #>         effect <- R #>         effect ~ add(effectSd) #>     }) #> }  readModelDb(\"PK_2cmt_no_depot\") |>   addDirectLin() |>   convertQuad() #>   #>   #>  ── rxode2-based free-form 2-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>      lcl      lvc      lvp       lq   propSd      uEk effectSd     uEk2  #>      1.0      3.0      5.0      0.1      0.5      0.1      0.1      0.1  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1          central #> 2                  2      peripheral1 #>  ── Multiple Endpoint Model ($multipleEndpoint): ──   #>     variable                   cmt                   dvid* #> 1     Cc ~ …     cmt='Cc' or cmt=3     dvid='Cc' or dvid=1 #> 2 effect ~ … cmt='effect' or cmt=4 dvid='effect' or dvid=2 #>   * If dvids are outside this range, all dvids are re-numered sequentially, ie 1,7, 10 becomes 1,2,3 etc #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         uEk <- 0.1 #>         label(\"untransformed slope (Ek)\") #>         effectSd <- c(0, 0.1) #>         label(\"additive error for effect\") #>         uEk2 <- 0.1 #>         label(\"untransformed quadratic slope (Ek2)\") #>     }) #>     model({ #>         Ek2 <- uEk2 #>         Ek <- uEk #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         q <- exp(lq) #>         kel <- cl/vc #>         k12 <- q/vc #>         k21 <- q/vp #>         d/dt(central) <- kel * central - k12 * central + k21 *  #>             peripheral1 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>         effect <- Ek * Cc + Ek2 * Cc^2 #>         effect ~ add(effectSd) #>     }) #> }  readModelDb(\"PK_2cmt_no_depot\") |>  addEffectCmtLin() |>  convertQuad() #>   #>   #>  ── rxode2-based free-form 3-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>      lcl      lvc      lvp       lq   propSd     lke0      uEk effectSd  #>      1.0      3.0      5.0      0.1      0.5      0.1      0.1      0.1  #>     uEk2  #>      0.1  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1          central #> 2                  2      peripheral1 #> 3                  3               Ce #>  ── Multiple Endpoint Model ($multipleEndpoint): ──   #>     variable                   cmt                   dvid* #> 1     Cc ~ …     cmt='Cc' or cmt=4     dvid='Cc' or dvid=1 #> 2 effect ~ … cmt='effect' or cmt=5 dvid='effect' or dvid=2 #>   * If dvids are outside this range, all dvids are re-numered sequentially, ie 1,7, 10 becomes 1,2,3 etc #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3 #>         label(\"Central volume of distribution (V)\") #>         lvp <- 5 #>         label(\"Peripheral volume of distribution (Vp)\") #>         lq <- 0.1 #>         label(\"Intercompartmental clearance (Q)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lke0 <- 0.1 #>         label(\"effect compartment rate (ke0)\") #>         uEk <- 0.1 #>         label(\"untransformed linear slope (Ek)\") #>         effectSd <- c(0, 0.1) #>         label(\"additive error for effect\") #>         uEk2 <- 0.1 #>         label(\"untransformed quadratic slope (Ek2)\") #>     }) #>     model({ #>         Ek2 <- uEk2 #>         ke0 <- exp(lke0) #>         Ek <- uEk #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         vp <- exp(lvp) #>         q <- exp(lq) #>         kel <- cl/vc #>         k12 <- q/vc #>         k21 <- q/vp #>         d/dt(central) <- kel * central - k12 * central + k21 *  #>             peripheral1 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>         d/dt(Ce) <- ke0 * (Cc - Ce) #>         effect <- Ek * Ce + Ek2 * Ce^2 #>         effect ~ add(effectSd) #>     }) #> }"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/defaultCombine.html","id":null,"dir":"Reference","previous_headings":"","what":"Default combine strings — defaultCombine","title":"Default combine strings — defaultCombine","text":"Default combine strings","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/defaultCombine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default combine strings — defaultCombine","text":"","code":"defaultCombine(...)  snakeCombine(...)  camelCombine(...)  dotCombine(...)  blankCombine(...)"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/defaultCombine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default combine strings — defaultCombine","text":"... uses default combine strings","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/defaultCombine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default combine strings — defaultCombine","text":"combined strings","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/defaultCombine.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Default combine strings — defaultCombine","text":"snakeCombine(): use snake_case combine 2 strings camelCombine(): use camelCase combine strings dotCombine(): use default method combining two strings blankCombine(): combine using blank separator","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/defaultCombine.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Default combine strings — defaultCombine","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/defaultCombine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default combine strings — defaultCombine","text":"","code":"# default combine  defaultCombine(\"f\", \"depot\") #> [1] \"fDepot\"  defaultCombine(list(c(\"a\", \"funny\", \"c\"))) #> [1] \"aFunnyC\"  defaultCombine(c(\"a\", \"funny\", \"c\")) #> [1] \"aFunnyC\"  # snake combine  snakeCombine(\"f\", \"depot\") #> [1] \"f_depot\"  snakeCombine(list(c(\"a\", \"funny\", \"c\"))) #> [1] \"a_funny_c\"  snakeCombine(c(\"a\", \"funny\", \"c\")) #> [1] \"a_funny_c\"  # dot combine  dotCombine(\"f\", \"depot\") #> [1] \"f.depot\"  dotCombine(list(c(\"a\", \"funny\", \"c\"))) #> [1] \"a.funny.c\"  dotCombine(c(\"a\", \"funny\", \"c\")) #> [1] \"a.funny.c\"  # blank combine  blankCombine(\"f\", \"depot\") #> [1] \"fdepot\"  blankCombine(list(c(\"a\", \"funny\", \"c\"))) #> [1] \"afunnyc\"  blankCombine(c(\"a\", \"funny\", \"c\")) #> [1] \"afunnyc\""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/fakeCc.html","id":null,"dir":"Reference","previous_headings":"","what":"Fake blank Cc for creating PD only models — fakeCc","title":"Fake blank Cc for creating PD only models — fakeCc","text":"Fake blank Cc creating PD models","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/fakeCc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fake blank Cc for creating PD only models — fakeCc","text":"","code":"fakeCc(fun, ..., cc = \"Cc\")"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/fakeCc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fake blank Cc for creating PD only models — fakeCc","text":"fun function requires Cc ... arguments sent PD function cc character name concentration central compartment faked allow models require Cc change models Cc covariate","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/fakeCc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fake blank Cc for creating PD only models — fakeCc","text":"Model Cc covariate","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/fakeCc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fake blank Cc for creating PD only models — fakeCc","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/fakeCc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fake blank Cc for creating PD only models — fakeCc","text":"","code":"fakeCc(addDirectLin) |> convertEmaxHill() #>   #>   #>  ── rxode2-based Pred model ─────────────────────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>  effectSd     lEmax     lEC50       lgg  #>  0.100000  0.100000  0.100000 -2.302585  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         effectSd <- c(0, 0.1) #>         label(\"additive error for effect\") #>         lEmax <- 0.1 #>         label(\"Maximum effect (Emax)\") #>         lEC50 <- 0.1 #>         label(\"Concentration of 50% Emax (Emax)\") #>         lgg <- -2.30258509299405 #>         label(\"logit-constrained Hill coefficient g\") #>     }) #>     model({ #>         Emax <- exp(lEmax) #>         EC50 <- exp(lEC50) #>         g <- expit(lgg, 0.1, 10) #>         effect <- Emax * Cc^g/(Cc^g + EC50^g) #>         effect ~ add(effectSd) #>     }) #> }"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/modeldb.html","id":null,"dir":"Reference","previous_headings":"","what":"Model library for nlmixr2 — modeldb","title":"Model library for nlmixr2 — modeldb","text":"data frame available models nlmixr2lib, generated package.  Custom modeldb may used.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/modeldb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model library for nlmixr2 — modeldb","text":"","code":"modeldb"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/modeldb.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Model library for nlmixr2 — modeldb","text":"data frame 52 rows 9 columns name Model name can used extract model model library description Model description free text; model parameters comma separated string listing either parameter model defined population/individual effects population effect parameter DV definition dependent variable(s) linCmt Logical flag indicating solved models used (TRUE) (FALSE) algebraic Logical flag indicating model purely algebraic: TRUE linCmt() ODEs; FALSE otherwise dosing comma separated string identified dosing compartments depends comma separated string objects model depends filename Filename model.  default installed model library read demand","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/modellib.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the model from the model library — modellib","title":"Get the model from the model library — modellib","text":"function gets model available model library","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/modellib.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the model from the model library — modellib","text":"","code":"modellib(name = NULL, eta = NULL, reserr = NULL)"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/modellib.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the model from the model library — modellib","text":"name character name model load (NULL, lists available base models) eta vector parameters add random effects (sometimes referred inter-individual variability, IIV) reserr type types residual error (currently \"addSd\", \"propSd\", \"lnormSd\" accepted)","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/modellib.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the model from the model library — modellib","text":"function returns function model code (NULL   model = NULL)","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/modellib.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the model from the model library — modellib","text":"first draft just look proof concept","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/modellib.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the model from the model library — modellib","text":"","code":"modellib(name = \"PK_1cmt\") #> function() { #>   description <- \"One compartment PK model with linear clearance\" #>   ini({ #>     lka <- 0.45 ; label(\"Absorption rate (Ka)\") #>     lcl <- 1 ; label(\"Clearance (CL)\") #>     lvc  <- 3.45 ; label(\"Central volume of distribution (V)\") #>     propSd <- 0.5 ; label(\"Proportional residual error (fraction)\") #>   }) #>   model({ #>     ka <- exp(lka) #>     cl <- exp(lcl) #>     vc  <- exp(lvc) #>  #>     Cc <- linCmt() #>     Cc ~ prop(propSd) #>   }) #> } #> <environment: 0x564401154888> modellib(name = \"PK_1cmt\", eta = c(\"ka\", \"vc\"), reserr = \"addSd\") #>   #>   #>   #>   #> → Adding eta to lka instead of ka due to mu-referencing #>   #>   #> → Adding eta to lvc instead of vc due to mu-referencing #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> ℹ promote `etaKa` to between subject variability with initial estimate 0.1 #> ℹ change initial estimate of `etaKa` to `0.1` #> ℹ promote `etaVc` to between subject variability with initial estimate 0.1 #> ℹ change initial estimate of `etaVc` to `0.1` #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> ! remove population parameter `propSd` #> ℹ add residual parameter `CcAddSd` and set estimate to 1 #> ℹ change initial estimate of `CcAddSd` to `1` #>  ── rxode2-based solved PK 1-compartment model with first-order absorption ──────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>     lka     lcl     lvc CcAddSd  #>    0.45    1.00    3.45    1.00  #>  #> Omega ($omega):  #>       etaKa etaVc #> etaKa   0.1   0.0 #> etaVc   0.0   0.1 #>  ── μ-referencing ($muRefTable): ──   #>   theta   eta level #> 1   lka etaKa    id #> 2   lvc etaVc    id #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         CcAddSd <- c(0, 1) #>         etaKa ~ 0.1 #>         etaVc ~ 0.1 #>     }) #>     model({ #>         ka <- exp(lka + etaKa) #>         cl <- exp(lcl) #>         vc <- exp(lvc + etaVc) #>         Cc <- linCmt() #>         Cc ~ add(CcAddSd) #>     }) #> } modellib(name = \"PK_1cmt\", reserr = \"addSd\") #>   #>   #>   #>   #> ! remove population parameter `propSd` #> ℹ add residual parameter `CcAddSd` and set estimate to 1 #> ℹ change initial estimate of `CcAddSd` to `1` #>  ── rxode2-based solved PK 1-compartment model with first-order absorption ──────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>     lka     lcl     lvc CcAddSd  #>    0.45    1.00    3.45    1.00  #>  ── Model (Normalized Syntax): ──  #> function() { #>     description <- \"One compartment PK model with linear clearance\" #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         CcAddSd <- c(0, 1) #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         Cc <- linCmt() #>         Cc ~ add(CcAddSd) #>     }) #> }"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/pkTrans.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the transformation type for PK models — pkTrans","title":"Change the transformation type for PK models — pkTrans","text":"Change transformation type PK models","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/pkTrans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the transformation type for PK models — pkTrans","text":"","code":"pkTrans(   ui,   type = c(\"k\", \"k21\", \"vss\", \"aob\", \"alpha\"),   k13 = \"k13\",   k31 = \"k31\",   k12 = \"k12\",   k21 = \"k21\",   kel = \"kel\",   vc = \"vc\",   cl = \"cl\",   vp = \"vp\",   q = \"q\",   vp2 = \"vp2\",   q2 = \"q2\",   vss = \"vss\",   aob = \"aob\",   alpha = \"alpha\",   beta = \"beta\",   gam = \"gam\",   A = \"A\",   B = \"B\",   C = \"C\",   s = \"s\",   p = \"p\",   tmp = \"tmp\",   beforeCmt = c(\"depot\", \"central\") )"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/pkTrans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the transformation type for PK models — pkTrans","text":"ui model terms Clearance type type PK transformation make: - \"k\": Change rate constants (kel, k12, k21, k13, k31) - \"vss\": Change volume distribution steady state (cl, vc, q, vss) - \"aob\": Change /B ratio (aob, alpha, beta, vc) - \"k21\": Change k21 constant (k21, alpha, beta, vc) (k21, k31, alpha, beta, gam, vc) - \"alpha\": Change macro constants  (alpha, beta, gam, , B, C, vc) k13 name rate constant central periph2 k31 name rate constant periph2 central k12 name rate constant central periph1 k21 name rate constant periph1 central kel name elimination rate constant vc name central compartment volume cl name clearance vp name volume periph1 q name intercompartmental clearance central periph1 vp2 name volume periph2 q2 name intercompartmental clearance central periph2 vss name volume distribution steady state aob /B ratio alpha macro constant name first exponential decay term beta macro constant name second exponential decay term gam macro constant name third exponential decay term macro coefficient first exponential decay term (corresponds alpha) B macro coefficient second exponential decay term (corresponds beta) C macro coefficient third exponential decay term (corresponds gam) s sum constant name k12 three compartment p product constant name k12 three compartment tmp name temporary variable three compartment ``, `B`, `C`, `alpha`, `beta` `gam`. beforeCmt model compartmental can specify preferred names estimates extra lines added ","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/pkTrans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change the transformation type for PK models — pkTrans","text":"ui PK parameters estimated","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/pkTrans.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Change the transformation type for PK models — pkTrans","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/pkTrans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the transformation type for PK models — pkTrans","text":"","code":"# \\donttest{ # Three compartment model translations  readModelDb(\"PK_3cmt_des\") |>   pkTrans(\"k\") #>   #>   #>  ── rxode2-based free-form 4-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>    lka propSd   lk12   lk21   lk13   lk31   lkel    lvc  #>   0.45   0.50   0.10   0.10   0.10   0.10   0.10   0.10  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1            depot #> 2                  2          central #> 3                  3      peripheral1 #> 4                  4      peripheral2 #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lk12 <- 0.1 #>         label(\"Central->Periph1 constant (k12)\") #>         lk21 <- 0.1 #>         label(\"Periph1->Central constant (k21)\") #>         lk13 <- 0.1 #>         label(\"Central->Periph2 constant (k13)\") #>         lk31 <- 0.1 #>         label(\"Periph2->Central constant (k31)\") #>         lkel <- 0.1 #>         label(\"Elimination from central (kel)\") #>         lvc <- 0.1 #>         label(\"Central compartment volume (vc)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         k12 <- exp(lk12) #>         k21 <- exp(lk21) #>         k13 <- exp(lk13) #>         k31 <- exp(lk31) #>         kel <- exp(lkel) #>         vc <- exp(lvc) #>         d/dt(depot) <- -ka * depot #>         d/dt(central) <- ka * depot - kel * central - k12 * central +  #>             k21 * peripheral1 - k13 * central + k31 * peripheral2 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         d/dt(peripheral2) <- k13 * central - k31 * peripheral2 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>     }) #> }  readModelDb(\"PK_3cmt_des\") |>   pkTrans(\"k21\") #>   #>   #>  ── rxode2-based free-form 4-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>    lka propSd   lk21   lk31 lalpha  lbeta   lgam    lvc  #>   0.45   0.50   0.10   0.10   0.10   0.10   0.10   0.10  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1            depot #> 2                  2          central #> 3                  3      peripheral1 #> 4                  4      peripheral2 #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lk21 <- 0.1 #>         label(\"Periph1->Central constant (k21)\") #>         lk31 <- 0.1 #>         label(\"Periph2->Central constant (k31)\") #>         lalpha <- 0.1 #>         label(\"alpha macro constant (alpha)\") #>         lbeta <- 0.1 #>         label(\"beta macro constant (beta)\") #>         lgam <- 0.1 #>         label(\"gam macro constant (gam)\") #>         lvc <- 0.1 #>         label(\"Volume of central compartment (vc)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         k21 <- exp(lk21) #>         k31 <- exp(lk31) #>         alpha <- exp(lalpha) #>         beta <- exp(lbeta) #>         gam <- exp(lgam) #>         vc <- exp(lvc) #>         kel <- alpha * beta * gam/(k21 * k31) #>         s <- alpha + beta + gam #>         p <- alpha * beta + alpha * gam + beta * gam #>         k13 <- (p + k31 * k31 - k31 * s - kel * k21)/(k21 - k31) #>         k12 <- s - kel - k13 - k21 - k31 #>         d/dt(depot) <- -ka * depot #>         d/dt(central) <- ka * depot - kel * central - k12 * central +  #>             k21 * peripheral1 - k13 * central + k31 * peripheral2 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         d/dt(peripheral2) <- k13 * central - k31 * peripheral2 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>     }) #> }  readModelDb(\"PK_3cmt_des\") |>   pkTrans(\"alpha\") #>   #>   #>  ── rxode2-based free-form 4-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>    lka propSd lalpha  lbeta   lgam     lA     lB     lC  #>   0.45   0.50   0.10   0.10   0.10   0.10   0.10   0.10  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1            depot #> 2                  2          central #> 3                  3      peripheral1 #> 4                  4      peripheral2 #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lalpha <- 0.1 #>         label(\"alpha macro constant (alpha)\") #>         lbeta <- 0.1 #>         label(\"beta macro constant (beta)\") #>         lgam <- 0.1 #>         label(\"gam macro constant (gam)\") #>         lA <- 0.1 #>         label(\"A coefficient (A)\") #>         lB <- 0.1 #>         label(\"B coefficient (B)\") #>         lC <- 0.1 #>         label(\"C coefficent (C)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         alpha <- exp(lalpha) #>         beta <- exp(lbeta) #>         gam <- exp(lgam) #>         A <- exp(lA) #>         B <- exp(lB) #>         C <- exp(lC) #>         vc <- 1/(A + B + C) #>         s <- -(alpha * C + alpha * B + gam * A + gam * B + beta *  #>             A + beta * C) * vc #>         p <- (alpha * beta * C + alpha * gam * B + beta * gam *  #>             A) * vc #>         tmp <- sqrt(p * p - 4 * s) #>         k21 <- 0.5 * (-p + tmp) #>         k31 <- 0.5 * (-p - tmp) #>         kel <- alpha * beta * gam/(k21 * k31) #>         k12 <- ((beta * gam + alpha * beta + alpha * gam) - k21 *  #>             (alpha + beta + gam) - kel * k31 + k21 * k21)/(k31 -  #>             k21) #>         k13 <- alpha + beta + gam - (kel + k12 + k21 + k31) #>         d/dt(depot) <- -ka * depot #>         d/dt(central) <- ka * depot - kel * central - k12 * central +  #>             k21 * peripheral1 - k13 * central + k31 * peripheral2 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         d/dt(peripheral2) <- k13 * central - k31 * peripheral2 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>     }) #> }  # The most types of transformations are # available for 2 compartment models  readModelDb(\"PK_2cmt_des\") |>   pkTrans(\"k\") #>   #>   #>  ── rxode2-based free-form 3-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>    lka propSd   lk12   lk21   lkel    lvc  #>   0.45   0.50   0.10   0.10   0.10   0.10  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1            depot #> 2                  2          central #> 3                  3      peripheral1 #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lk12 <- 0.1 #>         label(\"Central->Periph1 constant (k12)\") #>         lk21 <- 0.1 #>         label(\"Periph1->Central constant (k21)\") #>         lkel <- 0.1 #>         label(\"Elimination from central (kel)\") #>         lvc <- 0.1 #>         label(\"Central compartment volume (vc)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         k12 <- exp(lk12) #>         k21 <- exp(lk21) #>         kel <- exp(lkel) #>         vc <- exp(lvc) #>         d/dt(depot) <- -ka * depot #>         d/dt(central) <- ka * depot - kel * central - k12 * central +  #>             k21 * peripheral1 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>     }) #> }  readModelDb(\"PK_2cmt_des\") |>   pkTrans(\"vss\") #>   #>   #>  ── rxode2-based free-form 3-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>    lka propSd    lcl    lvc     lq   lvss  #>   0.45   0.50   0.10   0.10   0.10   0.10  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1            depot #> 2                  2          central #> 3                  3      peripheral1 #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lcl <- 0.1 #>         label(\"Clearance (cl)\") #>         lvc <- 0.1 #>         label(\"Central compartment volume (vc)\") #>         lq <- 0.1 #>         label(\"Periph1<->Central inter-compartmental clearance (q)\") #>         lvss <- 0.1 #>         label(\"Volume of distribution at steady state (vss)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         q <- exp(lq) #>         vss <- exp(lvss) #>         kel <- cl/vc #>         k12 <- q/vc #>         k21 <- q/(vss - vc) #>         d/dt(depot) <- -ka * depot #>         d/dt(central) <- ka * depot - kel * central - k12 * central +  #>             k21 * peripheral1 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>     }) #> }  readModelDb(\"PK_2cmt_des\") |>   pkTrans(\"aob\") #>   #>   #>  ── rxode2-based free-form 3-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>    lka propSd   laob lalpha  lbeta    lvc  #>   0.45   0.50   0.10   0.10   0.10   0.10  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1            depot #> 2                  2          central #> 3                  3      peripheral1 #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         laob <- 0.1 #>         label(\"A/B (aob)\") #>         lalpha <- 0.1 #>         label(\"alpha macro constant (alpha)\") #>         lbeta <- 0.1 #>         label(\"beta macro constant (beta)\") #>         lvc <- 0.1 #>         label(\"Volume of central compartment (vc)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         aob <- exp(laob) #>         alpha <- exp(lalpha) #>         beta <- exp(lbeta) #>         vc <- exp(lvc) #>         k21 <- (aob * beta + alpha)/(aob + 1) #>         kel <- (alpha * beta)/k21 #>         k12 <- alpha + beta - k21 - kel #>         d/dt(depot) <- -ka * depot #>         d/dt(central) <- ka * depot - kel * central - k12 * central +  #>             k21 * peripheral1 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>     }) #> }  readModelDb(\"PK_2cmt_des\") |>   pkTrans(\"k21\") #>   #>   #>  ── rxode2-based free-form 3-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>    lka propSd   lk21 lalpha  lbeta    lvc  #>   0.45   0.50   0.10   0.10   0.10   0.10  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1            depot #> 2                  2          central #> 3                  3      peripheral1 #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lk21 <- 0.1 #>         label(\"Periph1->Central constant (k21)\") #>         lalpha <- 0.1 #>         label(\"alpha macro constant (alpha)\") #>         lbeta <- 0.1 #>         label(\"beta macro constant (beta)\") #>         lvc <- 0.1 #>         label(\"Volume of central compartment (vc)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         k21 <- exp(lk21) #>         alpha <- exp(lalpha) #>         beta <- exp(lbeta) #>         vc <- exp(lvc) #>         kel <- alpha * beta/k21 #>         k12 <- alpha + beta - k21 - kel #>         d/dt(depot) <- -ka * depot #>         d/dt(central) <- ka * depot - kel * central - k12 * central +  #>             k21 * peripheral1 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>     }) #> }  readModelDb(\"PK_2cmt_des\") |>   pkTrans(\"alpha\") #>   #>   #>  ── rxode2-based free-form 3-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>    lka propSd lalpha  lbeta     lA     lB  #>   0.45   0.50   0.10   0.10   0.10   0.10  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1            depot #> 2                  2          central #> 3                  3      peripheral1 #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lalpha <- 0.1 #>         label(\"alpha macro constant (alpha)\") #>         lbeta <- 0.1 #>         label(\"beta macro constant (beta)\") #>         lA <- 0.1 #>         label(\"A coefficient (A)\") #>         lB <- 0.1 #>         label(\"B coefficient (B)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         alpha <- exp(lalpha) #>         beta <- exp(lbeta) #>         A <- exp(lA) #>         B <- exp(lB) #>         vc <- 1/(A + B) #>         k21 <- (A * beta + B * alpha) * vc #>         kel <- alpha * beta/k21 #>         k12 <- alpha + beta - k21 - kel #>         d/dt(depot) <- -ka * depot #>         d/dt(central) <- ka * depot - kel * central - k12 * central +  #>             k21 * peripheral1 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>     }) #> }  # One compartment transformations are also available:  readModelDb(\"PK_1cmt_des\") |>   pkTrans(\"k\") #>   #>   #>  ── rxode2-based free-form 2-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>    lka propSd   lkel    lvc  #>   0.45   0.50   0.10   0.10  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1            depot #> 2                  2          central #>  ── Model (Normalized Syntax): ──  #> function() { #>     dosing <- c(\"central\", \"depot\") #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lkel <- 0.1 #>         label(\"Elimination from central (kel)\") #>         lvc <- 0.1 #>         label(\"Central compartment volume (vc)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         kel <- exp(lkel) #>         vc <- exp(lvc) #>         d/dt(depot) <- -ka * depot #>         d/dt(central) <- ka * depot - kel * central #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>     }) #> }  readModelDb(\"PK_1cmt_des\") |>   pkTrans(\"alpha\") #>   #>   #>  ── rxode2-based free-form 2-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>    lka propSd lalpha     lA  #>   0.45   0.50   0.10   0.10  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1            depot #> 2                  2          central #>  ── Model (Normalized Syntax): ──  #> function() { #>     dosing <- c(\"central\", \"depot\") #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lalpha <- 0.1 #>         label(\"alpha macro constant (alpha)\") #>         lA <- 0.1 #>         label(\"A coefficient (A)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         alpha <- exp(lalpha) #>         A <- exp(lA) #>         kel <- alpha #>         vc <- 1/A #>         d/dt(depot) <- -ka * depot #>         d/dt(central) <- ka * depot - kel * central #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>     }) #> }  # also works without depot:  readModelDb(\"PK_3cmt_des\") |>   removeDepot() |>   pkTrans(\"k\") #>   #>   #>  ── rxode2-based free-form 3-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #> propSd   lk12   lk21   lk13   lk31   lkel    lvc  #>    0.5    0.1    0.1    0.1    0.1    0.1    0.1  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1          central #> 2                  2      peripheral1 #> 3                  3      peripheral2 #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lk12 <- 0.1 #>         label(\"Central->Periph1 constant (k12)\") #>         lk21 <- 0.1 #>         label(\"Periph1->Central constant (k21)\") #>         lk13 <- 0.1 #>         label(\"Central->Periph2 constant (k13)\") #>         lk31 <- 0.1 #>         label(\"Periph2->Central constant (k31)\") #>         lkel <- 0.1 #>         label(\"Elimination from central (kel)\") #>         lvc <- 0.1 #>         label(\"Central compartment volume (vc)\") #>     }) #>     model({ #>         k12 <- exp(lk12) #>         k21 <- exp(lk21) #>         k13 <- exp(lk13) #>         k31 <- exp(lk31) #>         kel <- exp(lkel) #>         vc <- exp(lvc) #>         d/dt(central) <- -kel * central - k12 * central + k21 *  #>             peripheral1 - k13 * central + k31 * peripheral2 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         d/dt(peripheral2) <- k13 * central - k31 * peripheral2 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>     }) #> }  # }"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/readModelDb.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a model from the nlmixr2 model database — readModelDb","title":"Read a model from the nlmixr2 model database — readModelDb","text":"Read model nlmixr2 model database","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/readModelDb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a model from the nlmixr2 model database — readModelDb","text":"","code":"readModelDb(name)"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/readModelDb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a model from the nlmixr2 model database — readModelDb","text":"name name model (must one modeldb$name)","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/readModelDb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a model from the nlmixr2 model database — readModelDb","text":"model function","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/readModelDb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a model from the nlmixr2 model database — readModelDb","text":"","code":"readModelDb(\"PK_1cmt\") #> function() { #>   description <- \"One compartment PK model with linear clearance\" #>   ini({ #>     lka <- 0.45 ; label(\"Absorption rate (Ka)\") #>     lcl <- 1 ; label(\"Clearance (CL)\") #>     lvc  <- 3.45 ; label(\"Central volume of distribution (V)\") #>     propSd <- 0.5 ; label(\"Proportional residual error (fraction)\") #>   }) #>   model({ #>     ka <- exp(lka) #>     cl <- exp(lcl) #>     vc  <- exp(lvc) #>  #>     Cc <- linCmt() #>     Cc ~ prop(propSd) #>   }) #> } #> <environment: 0x564403c1e1e8>"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. rxode2 assertCompartmentExists, assertCompartmentName, assertParameterValue, assertRxUi, assertRxUiEstimatedResiduals, assertRxUiMixedOnly, assertRxUiMuRefOnly, assertRxUiNormal, assertRxUiPopulationOnly, assertRxUiPrediction, assertRxUiRandomOnIdOnly, assertRxUiSingleEndpoint, assertRxUiTransformNormal, assertVariableName, expit, logit","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/removeDepot.html","id":null,"dir":"Reference","previous_headings":"","what":"To convert from first order oral absorption to IV/Intravenous — removeDepot","title":"To convert from first order oral absorption to IV/Intravenous — removeDepot","text":"convert first order oral absorption IV/Intravenous","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/removeDepot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"To convert from first order oral absorption to IV/Intravenous — removeDepot","text":"","code":"removeDepot(ui, central = \"central\", depot = \"depot\", ka = \"ka\")"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/removeDepot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"To convert from first order oral absorption to IV/Intravenous — removeDepot","text":"ui model function (something convertible rxUi object) central central compartment name depot depot compartment name ka absorption rate parameter name","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/removeDepot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"To convert from first order oral absorption to IV/Intravenous — removeDepot","text":"Returns model depot first order absorption model removed","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/removeDepot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"To convert from first order oral absorption to IV/Intravenous — removeDepot","text":"","code":"readModelDb(\"PK_1cmt_des\") |> removeDepot() #>   #>   #>  ── rxode2-based free-form 1-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>    lcl    lvc propSd  #>   1.00   3.45   0.50  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1          central #>  ── Model (Normalized Syntax): ──  #> function() { #>     dosing <- c(\"central\", \"depot\") #>     ini({ #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         kel <- cl/vc #>         d/dt(central) <- -kel * central #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>     }) #> }"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/removeLinesAndInis.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes lines and inis from a model — removeLinesAndInis","title":"Removes lines and inis from a model — removeLinesAndInis","text":"Removes lines inis model","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/removeLinesAndInis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes lines and inis from a model — removeLinesAndInis","text":"","code":"removeLinesAndInis(ui, vars)"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/removeLinesAndInis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes lines and inis from a model — removeLinesAndInis","text":"ui rxode2 model vars character vector variables remove","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/removeLinesAndInis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removes lines and inis from a model — removeLinesAndInis","text":"model rxode2 lines estimates associate lines removed","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/removeLinesAndInis.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Removes lines and inis from a model — removeLinesAndInis","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/removeLinesAndInis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Removes lines and inis from a model — removeLinesAndInis","text":"","code":"readModelDb(\"PK_3cmt_des\") |> removeLinesAndInis(c(\"kel\", \"k12\", \"k21\")) #>   #>   #>  ── rxode2-based free-form 4-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>    lka   lvp2    lq2 propSd  #>   0.45   8.00   0.50   0.50  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1            depot #> 2                  2          central #> 3                  3      peripheral1 #> 4                  4      peripheral2 #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lvp2 <- 8 #>         label(\"Second peripheral volume of distribution (Vp2)\") #>         lq2 <- 0.5 #>         label(\"Second intercompartmental clearance (Q2)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         vp2 <- exp(lvp2) #>         q2 <- exp(lq2) #>         k13 <- q2/vc #>         k31 <- q2/vp2 #>         d/dt(depot) <- -ka * depot #>         d/dt(central) <- ka * depot - kel * central - k12 * central +  #>             k21 * peripheral1 - k13 * central + k31 * peripheral2 #>         d/dt(peripheral1) <- k12 * central - k21 * peripheral1 #>         d/dt(peripheral2) <- k13 * central - k31 * peripheral2 #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>     }) #> }"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/removeTransit.html","id":null,"dir":"Reference","previous_headings":"","what":"To remove transit compartments from the model — removeTransit","title":"To remove transit compartments from the model — removeTransit","text":"remove transit compartments model","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/removeTransit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"To remove transit compartments from the model — removeTransit","text":"","code":"removeTransit(   ui,   ntransit,   central = \"central\",   depot = \"depot\",   transit = \"transit\",   ktr = \"ktr\",   ka = \"ka\" )"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/removeTransit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"To remove transit compartments from the model — removeTransit","text":"ui model function ntransit number transit compartments added central central compartment name depot depot compartment name transit number transit compartments remove ktr parameter name transit compartment rate ka absorption rate parameter name","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/removeTransit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"To remove transit compartments from the model — removeTransit","text":"rxode2 model transit compartment removed","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/removeTransit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"To remove transit compartments from the model — removeTransit","text":"","code":"# In this example the transit is added and then a few are removed  readModelDb(\"PK_1cmt_des\") |> addTransit(4) |> removeTransit(3) #>   #>   #>  ── rxode2-based free-form 3-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>    lka    lcl    lvc propSd   lktr  #>   0.45   1.00   3.45   0.50   0.10  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1            depot #> 2                  2         transit1 #> 3                  3          central #>  ── Model (Normalized Syntax): ──  #> function() { #>     dosing <- c(\"central\", \"depot\") #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>         lktr <- 0.1 #>         label(\"First order transition rate (ktr)\") #>     }) #>     model({ #>         ktr <- exp(lktr) #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         kel <- cl/vc #>         d/dt(depot) <- ktr * depot #>         d/dt(transit1) <- ktr * depot - ktr * transit1 #>         d/dt(central) <- ka * transit1 - kel * central #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>     }) #> }  readModelDb(\"PK_1cmt_des\") |> addTransit(4) |> removeTransit() #>   #>   #>  ── rxode2-based free-form 2-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>    lka    lcl    lvc propSd  #>   0.45   1.00   3.45   0.50  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1            depot #> 2                  2          central #>  ── Model (Normalized Syntax): ──  #> function() { #>     dosing <- c(\"central\", \"depot\") #>     ini({ #>         lka <- 0.45 #>         label(\"Absorption rate (Ka)\") #>         lcl <- 1 #>         label(\"Clearance (CL)\") #>         lvc <- 3.45 #>         label(\"Central volume of distribution (V)\") #>         propSd <- c(0, 0.5) #>         label(\"Proportional residual error (fraction)\") #>     }) #>     model({ #>         ka <- exp(lka) #>         cl <- exp(lcl) #>         vc <- exp(lvc) #>         kel <- cl/vc #>         d/dt(depot) <- -ka * depot #>         d/dt(central) <- ka * depot - kel * central #>         Cc <- central/vc #>         Cc ~ prop(propSd) #>     }) #> }"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/searchReplace.html","id":null,"dir":"Reference","previous_headings":"","what":"Search within a model to replace part of the model — searchReplace","title":"Search within a model to replace part of the model — searchReplace","text":"Search within model replace part model","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/searchReplace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search within a model to replace part of the model — searchReplace","text":"","code":"searchReplace(object, find, replace)  searchReplaceHelper(object, find, replace)"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/searchReplace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search within a model to replace part of the model — searchReplace","text":"object function specifying nlmixr2 model find, replace Character scalars parts model replace","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/searchReplace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search within a model to replace part of the model — searchReplace","text":"object find replaced replace","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/searchReplace.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Search within a model to replace part of the model — searchReplace","text":"searchReplaceHelper(): helper function searchReplace (intended users use directly)","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/setCombineType.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the default combine type for the package — setCombineType","title":"Change the default combine type for the package — setCombineType","text":"Change default combine type package","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/setCombineType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the default combine type for the package — setCombineType","text":"","code":"setCombineType(combineType = c(\"snake\", \"camel\", \"dot\", \"blank\"))"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/setCombineType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the default combine type for the package — setCombineType","text":"combineType default combine type: - \"default\": default combine - \"snake\": snake_case combine - \"camel\": camelCase combine - \"dot\": dot combine (.e. \".b\") - \"blank\": separator (.e. \"ab\")","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/setCombineType.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Change the default combine type for the package — setCombineType","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/setCombineType.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the default combine type for the package — setCombineType","text":"","code":"# Change to the popular snake_case setCombineType(\"snake\") defaultCombine(\"a\", \"b\") #> [1] \"a_b\"  # Change back to nlmixr2/rxode2 default camelCase  setCombineType(\"camel\") defaultCombine(\"a\", \"b\") #> [1] \"aB\"  # This is used to change the naming convention for parameters # produced by this package"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/updateOncologyXenograftSimeoni2004.html","id":null,"dir":"Reference","previous_headings":"","what":"Update an oncology xenograft model based on Simeoni 2004 — updateOncologyXenograftSimeoni2004","title":"Update an oncology xenograft model based on Simeoni 2004 — updateOncologyXenograftSimeoni2004","text":"Update oncology xenograft model based Simeoni 2004","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/updateOncologyXenograftSimeoni2004.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update an oncology xenograft model based on Simeoni 2004 — updateOncologyXenograftSimeoni2004","text":"","code":"updateOncologyXenograftSimeoni2004(   object,   ncmt,   damagedCmtName = \"damagedCells\",   drugEffectName = \"drugEffectCyclingCells\",   undamagedCmtName = \"cyclingCells\",   tumorVolName = \"tumorVol\",   transitRateName = \"damageTransit\" )"},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/updateOncologyXenograftSimeoni2004.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update an oncology xenograft model based on Simeoni 2004 — updateOncologyXenograftSimeoni2004","text":"object Fitted object function specifying model. ncmt desired number damaged cell compartments damagedCmtName, undamagedCmtName, tumorVolName character string names compartments damaged cells, undamaged cells, calculated tumor volume (sum undamaged damaged cells) drugEffectName, transitRateName character string names drug effect transit rate (used model block)","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/updateOncologyXenograftSimeoni2004.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update an oncology xenograft model based on Simeoni 2004 — updateOncologyXenograftSimeoni2004","text":"updated model new number compartments","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/reference/updateOncologyXenograftSimeoni2004.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update an oncology xenograft model based on Simeoni 2004 — updateOncologyXenograftSimeoni2004","text":"","code":"library(rxode2) readModelDb(\"oncology_xenograft_simeoni_2004\") %>%   updateOncologyXenograftSimeoni2004(ncmt = 5) #> ℹ You can modify the number of damaged cell compartments in the model using the function updateOncologyXenograftSimeoni2004(model, ncmt) #>   #>   #> ℹ add covariate `damagedCells1` #> ℹ add covariate `damagedCells2` #> ℹ add covariate `damagedCells3` #> ℹ add covariate `damagedCells4` #> ℹ add covariate `damagedCells5` #>  ── rxode2-based free-form 6-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>  ldamageTransit      ldrugSlope ltumorExpGrowth ltumorLinGrowth  tumorVolpropSd  #>     -0.03252319     -7.37137930     -1.29828348     -0.20579491      0.20000000  #>   tumorVoladdSd  #>     30.00000000  #>  #> States ($state or $stateDf):  #>   Compartment Number Compartment Name #> 1                  1     cyclingCells #> 2                  2    damagedCells1 #> 3                  3    damagedCells2 #> 4                  4    damagedCells3 #> 5                  5    damagedCells4 #> 6                  6    damagedCells5 #>  ── Model (Normalized Syntax): ──  #> function() { #>     depends <- \"Cc\" #>     description <- \"Oncology tumor growth model in xenograft models\" #>     reference <- \"Monica Simeoni, Paolo Magni, Cristiano Cammia, Giuseppe De Nicolao, Valter Croci, Enrico Pesenti, Massimiliano Germani, Italo Poggesi, Maurizio Rocchetti; Predictive Pharmacokinetic-Pharmacodynamic Modeling of Tumor Growth Kinetics in Xenograft Models after Administration of Anticancer Agents. Cancer Res 1 February 2004; 64 (3): 1094–1101. https://doi.org/10.1158/0008-5472.CAN-03-2524\" #>     units <- list(time = \"day\") #>     ini({ #>         ldamageTransit <- c(-2.30258509299405, -0.0325231917055601,  #>             2.30258509299405) #>         label(\"Transit rate through damage (1/day)\") #>         ldrugSlope <- c(-11.5129254649702, -7.37137930126383,  #>             -2.30258509299405) #>         label(\"Linear drug effect on cycling cells (1/(day*ng/mL))\") #>         ltumorExpGrowth <- c(-6.90775527898214, -1.29828348379718,  #>             0.693147180559945) #>         label(\"Tumor exponential growth rate (1/day)\") #>         ltumorLinGrowth <- c(-4.60517018598809, -0.205794912979597,  #>             1.6094379124341) #>         label(\"Tumor linear growth rate (tumor volume/day)\") #>         tumorVolpropSd <- c(0, 0.2) #>         label(\"Proportional residual error (fraction)\") #>         tumorVoladdSd <- c(0, 30) #>         label(\"Additive residual error (tumor volume)\") #>     }) #>     model({ #>         damageTransit <- exp(ldamageTransit) #>         drugSlope <- exp(ldrugSlope) #>         tumorExpGrowth <- exp(ltumorExpGrowth) #>         tumorLinGrowth <- exp(ltumorLinGrowth) #>         cyclingCells(0) <- tumorVol0 #>         psi <- 20 #>         tumorVol <- cyclingCells + damagedCells1 + damagedCells2 +  #>             damagedCells3 + damagedCells4 + damagedCells5 #>         drugEffectCyclingCells <- drugSlope * Cc #>         d/dt(cyclingCells) <- tumorExpGrowth * cyclingCells/(1 +  #>             (tumorExpGrowth/tumorLinGrowth * tumorVol)^psi)^(1/psi) -  #>             drugEffectCyclingCells * cyclingCells #>         tumorVol ~ prop(tumorVolpropSd) + add(tumorVoladdSd) #>         d/dt(damagedCells1) <- drugEffectCyclingCells * cyclingCells -  #>             damageTransit * damagedCells1 #>         d/dt(damagedCells2) <- damageTransit * (damagedCells1 -  #>             damagedCells2) #>         d/dt(damagedCells3) <- damageTransit * (damagedCells2 -  #>             damagedCells3) #>         d/dt(damagedCells4) <- damageTransit * (damagedCells3 -  #>             damagedCells4) #>         d/dt(damagedCells5) <- damageTransit * (damagedCells4 -  #>             damagedCells5) #>     }) #> }"},{"path":"https://nlmixr2.github.io/nlmixr2lib/news/index.html","id":"version-030","dir":"Changelog","previous_headings":"","what":"Version 0.3.0","title":"Version 0.3.0","text":"CRAN release: 2024-10-07 Added ability choose style type modifying models. Currently supported styles : “camel” variablesLikeThis, “snake” variables_like_this, “dot” variables.like.“blank” variableslikethis. can selected setCombineType(). new combination style, can change eta variables constructed option(nlmixr2lib.etaCombineType=\"camel\") whatever wish variable style . Added new model building framework building models PK model building functions addTransit()/removeTransit() present , now modified made bit robust, closely matching literature method transit compartments. addDepot()/removeDepot() present , modified bit robust. addWeibullAbs() adds Weibull absorption PK model convertMM() converts linear elimination Michaelis-Menten elimination transPK() converts cl style parameter transformations various PK transformations like k, aob, alpha, k12 PD model building functions addIndirectLin() – adds indirect effect model PK model concentration Cc model. purposely uses simple linear effect Cc*Ek Cc*Ik easy parse turn functional forms (like Emax Hill). PK model present use Cc covariate purely PD models. addIndirect() – builds addIndirectLin() adds Emax Hill models PK model. can also set imax=1 emax=1 drop parameters estimated model. Additionally hill=TRUE add Hill coefficient sigmoid model. addEffectCmtLin() – adds effect compartment based Cc model. linear effect can modified function forms. addDirectLin() – adds direct effect model based Cc model. Changing functional forms Effect models convertEmax() changes linear effect models Emax models convertEmaxHill() changes linear effect models Hill models convertQuad() changes linear effect models quadratic models convertLogLin() changes linear effect models log-linear models Changing functional forms Baselines non-indirect response models addBaselineConst() changes zero baseline estimated constant addBaselineLin() changes zero baseline estimated constant linear constant respect time. addBaselineExp() changes zero baseline exponential decay respect time addBaseline1exp() – baseline effect changed zero exponential approaching constant (respect time). Changing model properties (use addCmtProp()) addBioavailability() adds bioavailability property compartment addRate() adds modeled rate compartment addDur() adds modeled duration compartment addIni() adds initial value compartment addLag() adds lag time compartment Add Carlsson Petri (2021) liraglutide PK model Add Cirincione (2017) exenatide immediate-release PK model Add variety indirect response models Add variety tumor growth inhibition models move oncology models new model database directory Add variety double-absorption PK models cp related cpddSd cppropSd renamed Cc, CcAddSd CcPropSd (fix #70). Multiple-endpoint models DV column modeldb separated commas.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/news/index.html","id":"version-020","dir":"Changelog","previous_headings":"","what":"Version 0.2.0","title":"Version 0.2.0","text":"CRAN release: 2023-03-29 Work new rxode2 version 2.0.12 model() ini() assignment methods. Therapeutic-area specific models begun added. Models can now give user additional information load via message meta-data. Models can now different directories. change ease maintaining library, change affects users. regression addEta() change parameter, related change rxode2, fixed. addEta() detects add etas robustly covariates parameter.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/news/index.html","id":"models-added-0-2-0","dir":"Changelog","previous_headings":"","what":"Models added","title":"Version 0.2.0","text":"Add Davda (2014) mAb consensus model Add Liu (2017) time-dependent clearance model based nivolumab Add Kovalenko (2020) dupilumab PK model Add Soehoel (2022) tralokinumab PK model Add Zhu (2017) lebrikizumab PK model","code":""},{"path":"https://nlmixr2.github.io/nlmixr2lib/news/index.html","id":"version-010","dir":"Changelog","previous_headings":"","what":"Version 0.1.0","title":"Version 0.1.0","text":"CRAN release: 2022-10-31 Initial version","code":""}]
